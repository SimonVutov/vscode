{
  "/Users/simonvutov/Documents/vscode/.vscode/extensions/vscode-selfhost-import-aid/src/extension.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.vscode/extensions/vscode-selfhost-import-aid/src/extension.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as ts from 'typescript';\nimport * as path from 'path';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\n\tconst fileIndex = new class {\n\n\t\tprivate _currentRun?: Thenable<void>;\n\n\t\tprivate _disposables: vscode.Disposable[] = [];\n\n\t\tprivate readonly _index = new Map<string, vscode.Uri>();\n\n\t\tconstructor() {\n\t\t\tconst watcher = vscode.workspace.createFileSystemWatcher('**/*.ts', false, true, false);\n\t\t\tthis._disposables.push(watcher.onDidChange(e => { this._index.set(e.toString(), e); }));\n\t\t\tthis._disposables.push(watcher.onDidDelete(e => { this._index.delete(e.toString()); }));\n\t\t\tthis._disposables.push(watcher);\n\n\t\t\tthis._refresh(false);\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tfor (const disposable of this._disposables) {\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t\tthis._disposables = [];\n\t\t\tthis._index.clear();\n\t\t}\n\n\t\tasync all(token: vscode.CancellationToken) {\n\n\t\t\tawait Promise.race([this._currentRun, new Promise<void>(resolve => token.onCancellationRequested(resolve))]);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn Array.from(this._index.values());\n\t\t}\n\n\t\tprivate _refresh(clear: boolean) {\n\t\t\t// TODO@jrieken LATEST API! findFiles2New\n\t\t\tthis._currentRun = vscode.workspace.findFiles('src/vs/**/*.ts', '{**/node_modules/**,**/extensions/**}').then(all => {\n\t\t\t\tif (clear) {\n\t\t\t\t\tthis._index.clear();\n\t\t\t\t}\n\t\t\t\tfor (const item of all) {\n\t\t\t\t\tthis._index.set(item.toString(), item);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst selector: vscode.DocumentSelector = 'typescript';\n\n\tfunction findNodeAtPosition(document: vscode.TextDocument, node: ts.Node, position: vscode.Position): ts.Node | undefined {\n\t\tif (node.getStart() <= document.offsetAt(position) && node.getEnd() >= document.offsetAt(position)) {\n\t\t\treturn ts.forEachChild(node, child => findNodeAtPosition(document, child, position)) || node;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tfunction findImportAt(document: vscode.TextDocument, position: vscode.Position): ts.ImportDeclaration | undefined {\n\t\tconst sourceFile = ts.createSourceFile(document.fileName, document.getText(), ts.ScriptTarget.Latest, true);\n\t\tconst node = findNodeAtPosition(document, sourceFile, position);\n\t\tif (node && ts.isStringLiteral(node) && ts.isImportDeclaration(node.parent)) {\n\t\t\treturn node.parent;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tconst completionProvider = new class implements vscode.CompletionItemProvider {\n\t\tasync provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): Promise<vscode.CompletionList | undefined> {\n\n\t\t\tconst index = document.getText().lastIndexOf(' from \\'');\n\t\t\tif (index < 0 || document.positionAt(index).line < position.line) {\n\t\t\t\t// line after last import is before position\n\t\t\t\t// -> no completion, safe a parse call\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst node = findImportAt(document, position);\n\t\t\tif (!node) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst range = new vscode.Range(document.positionAt(node.moduleSpecifier.pos), document.positionAt(node.moduleSpecifier.end));\n\t\t\tconst uris = await fileIndex.all(token);\n\n\t\t\tif (!uris) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = new vscode.CompletionList();\n\t\t\tresult.isIncomplete = true;\n\n\t\t\tfor (const item of uris) {\n\n\t\t\t\tif (!item.path.endsWith('.ts')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet relativePath = path.relative(path.dirname(document.uri.path), item.path);\n\t\t\t\trelativePath = relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n\n\t\t\t\tconst label = path.basename(item.path, path.extname(item.path));\n\t\t\t\tconst insertText = ` '${relativePath.replace(/\\.ts$/, '.js')}'`;\n\t\t\t\tconst filterText = ` '${label}'`;\n\n\t\t\t\tconst completion = new vscode.CompletionItem({\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tdescription: vscode.workspace.asRelativePath(item),\n\t\t\t\t});\n\t\t\t\tcompletion.kind = vscode.CompletionItemKind.File;\n\t\t\t\tcompletion.insertText = insertText;\n\t\t\t\tcompletion.filterText = filterText;\n\t\t\t\tcompletion.range = range;\n\n\t\t\t\tresult.items.push(completion);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t};\n\n\tclass ImportCodeActions implements vscode.CodeActionProvider {\n\n\t\tstatic FixKind = vscode.CodeActionKind.QuickFix.append('esmImport');\n\n\t\tstatic SourceKind = vscode.CodeActionKind.SourceFixAll.append('esmImport');\n\n\t\tasync provideCodeActions(document: vscode.TextDocument, range: vscode.Range | vscode.Selection, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\n\t\t\tif (context.only && ImportCodeActions.SourceKind.intersects(context.only)) {\n\t\t\t\treturn this._provideFixAll(document, context, token);\n\t\t\t}\n\n\t\t\treturn this._provideFix(document, range, context, token);\n\t\t}\n\n\t\tprivate async _provideFixAll(document: vscode.TextDocument, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\n\t\t\tconst diagnostics = context.diagnostics\n\t\t\t\t.filter(d => d.code === 2307)\n\t\t\t\t.sort((a, b) => b.range.start.compareTo(a.range.start));\n\n\t\t\tif (diagnostics.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uris = await fileIndex.all(token);\n\t\t\tif (!uris) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = new vscode.CodeAction(`Fix All ESM Imports`, ImportCodeActions.SourceKind);\n\t\t\tresult.edit = new vscode.WorkspaceEdit();\n\t\t\tresult.diagnostics = [];\n\n\t\t\tfor (const diag of diagnostics) {\n\n\t\t\t\tconst actions = this._provideFixesForDiag(document, diag, uris);\n\n\t\t\t\tif (actions.length === 0) {\n\t\t\t\t\tconsole.log(`ESM: no fixes for \"${diag.message}\"`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (actions.length > 1) {\n\t\t\t\t\tconsole.log(`ESM: more than one fix for \"${diag.message}\", taking first`);\n\t\t\t\t\tconsole.log(actions);\n\t\t\t\t}\n\n\t\t\t\tconst [first] = actions;\n\t\t\t\tresult.diagnostics.push(diag);\n\n\t\t\t\tfor (const [uri, edits] of first.edit!.entries()) {\n\t\t\t\t\tresult.edit.set(uri, edits);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log(result.edit.get(document.uri));\n\t\t\treturn [result];\n\t\t}\n\n\t\tprivate async _provideFix(document: vscode.TextDocument, range: vscode.Range | vscode.Selection, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\t\t\tconst uris = await fileIndex.all(token);\n\t\t\tif (!uris) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst diag = context.diagnostics.find(d => d.code === 2307 && d.range.intersection(range));\n\t\t\treturn diag && this._provideFixesForDiag(document, diag, uris);\n\t\t}\n\n\t\tprivate _provideFixesForDiag(document: vscode.TextDocument, diag: vscode.Diagnostic, uris: Iterable<vscode.Uri>): vscode.CodeAction[] {\n\n\t\t\tconst node = findImportAt(document, diag.range.start)?.moduleSpecifier;\n\t\t\tif (!node || !ts.isStringLiteral(node)) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst nodeRange = new vscode.Range(document.positionAt(node.pos), document.positionAt(node.end));\n\t\t\tconst name = path.basename(node.text, path.extname(node.text));\n\n\t\t\tconst result: vscode.CodeAction[] = [];\n\n\t\t\tfor (const item of uris) {\n\t\t\t\tif (path.basename(item.path, path.extname(item.path)) === name) {\n\t\t\t\t\tlet relativePath = path.relative(path.dirname(document.uri.path), item.path).replace(/\\.ts$/, '.js');\n\t\t\t\t\trelativePath = relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n\n\t\t\t\t\tconst action = new vscode.CodeAction(`Fix to '${relativePath}'`, ImportCodeActions.FixKind);\n\t\t\t\t\taction.edit = new vscode.WorkspaceEdit();\n\t\t\t\t\taction.edit.replace(document.uri, nodeRange, ` '${relativePath}'`);\n\t\t\t\t\taction.diagnostics = [diag];\n\t\t\t\t\tresult.push(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tcontext.subscriptions.push(fileIndex);\n\tcontext.subscriptions.push(vscode.languages.registerCompletionItemProvider(selector, completionProvider));\n\tcontext.subscriptions.push(vscode.languages.registerCodeActionsProvider(selector, new ImportCodeActions(), { providedCodeActionKinds: [ImportCodeActions.FixKind, ImportCodeActions.SourceKind] }));\n}\n",
    "contentHash": "741e59394bfc5410",
    "timestamp": 1757742288666
  },
  "/Users/simonvutov/Documents/vscode/.vscode/extensions/vscode-selfhost-import-aid/src/extension.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.vscode/extensions/vscode-selfhost-import-aid/src/extension.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as ts from 'typescript';\nimport * as path from 'path';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\n\tconst fileIndex = new class {\n\n\t\tprivate _currentRun?: Thenable<void>;\n\n\t\tprivate _disposables: vscode.Disposable[] = [];\n\n\t\tprivate readonly _index = new Map<string, vscode.Uri>();\n\n\t\tconstructor() {\n\t\t\tconst watcher = vscode.workspace.createFileSystemWatcher('**/*.ts', false, true, false);\n\t\t\tthis._disposables.push(watcher.onDidChange(e => { this._index.set(e.toString(), e); }));\n\t\t\tthis._disposables.push(watcher.onDidDelete(e => { this._index.delete(e.toString()); }));\n\t\t\tthis._disposables.push(watcher);\n\n\t\t\tthis._refresh(false);\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tfor (const disposable of this._disposables) {\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t\tthis._disposables = [];\n\t\t\tthis._index.clear();\n\t\t}\n\n\t\tasync all(token: vscode.CancellationToken) {\n\n\t\t\tawait Promise.race([this._currentRun, new Promise<void>(resolve => token.onCancellationRequested(resolve))]);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn Array.from(this._index.values());\n\t\t}\n\n\t\tprivate _refresh(clear: boolean) {\n\t\t\t// TODO@jrieken LATEST API! findFiles2New\n\t\t\tthis._currentRun = vscode.workspace.findFiles('src/vs/**/*.ts', '{**/node_modules/**,**/extensions/**}').then(all => {\n\t\t\t\tif (clear) {\n\t\t\t\t\tthis._index.clear();\n\t\t\t\t}\n\t\t\t\tfor (const item of all) {\n\t\t\t\t\tthis._index.set(item.toString(), item);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst selector: vscode.DocumentSelector = 'typescript';\n\n\tfunction findNodeAtPosition(document: vscode.TextDocument, node: ts.Node, position: vscode.Position): ts.Node | undefined {\n\t\tif (node.getStart() <= document.offsetAt(position) && node.getEnd() >= document.offsetAt(position)) {\n\t\t\treturn ts.forEachChild(node, child => findNodeAtPosition(document, child, position)) || node;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tfunction findImportAt(document: vscode.TextDocument, position: vscode.Position): ts.ImportDeclaration | undefined {\n\t\tconst sourceFile = ts.createSourceFile(document.fileName, document.getText(), ts.ScriptTarget.Latest, true);\n\t\tconst node = findNodeAtPosition(document, sourceFile, position);\n\t\tif (node && ts.isStringLiteral(node) && ts.isImportDeclaration(node.parent)) {\n\t\t\treturn node.parent;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tconst completionProvider = new class implements vscode.CompletionItemProvider {\n\t\tasync provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): Promise<vscode.CompletionList | undefined> {\n\n\t\t\tconst index = document.getText().lastIndexOf(' from \\'');\n\t\t\tif (index < 0 || document.positionAt(index).line < position.line) {\n\t\t\t\t// line after last import is before position\n\t\t\t\t// -> no completion, safe a parse call\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst node = findImportAt(document, position);\n\t\t\tif (!node) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst range = new vscode.Range(document.positionAt(node.moduleSpecifier.pos), document.positionAt(node.moduleSpecifier.end));\n\t\t\tconst uris = await fileIndex.all(token);\n\n\t\t\tif (!uris) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = new vscode.CompletionList();\n\t\t\tresult.isIncomplete = true;\n\n\t\t\tfor (const item of uris) {\n\n\t\t\t\tif (!item.path.endsWith('.ts')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet relativePath = path.relative(path.dirname(document.uri.path), item.path);\n\t\t\t\trelativePath = relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n\n\t\t\t\tconst label = path.basename(item.path, path.extname(item.path));\n\t\t\t\tconst insertText = ` '${relativePath.replace(/\\.ts$/, '.js')}'`;\n\t\t\t\tconst filterText = ` '${label}'`;\n\n\t\t\t\tconst completion = new vscode.CompletionItem({\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tdescription: vscode.workspace.asRelativePath(item),\n\t\t\t\t});\n\t\t\t\tcompletion.kind = vscode.CompletionItemKind.File;\n\t\t\t\tcompletion.insertText = insertText;\n\t\t\t\tcompletion.filterText = filterText;\n\t\t\t\tcompletion.range = range;\n\n\t\t\t\tresult.items.push(completion);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t};\n\n\tclass ImportCodeActions implements vscode.CodeActionProvider {\n\n\t\tstatic FixKind = vscode.CodeActionKind.QuickFix.append('esmImport');\n\n\t\tstatic SourceKind = vscode.CodeActionKind.SourceFixAll.append('esmImport');\n\n\t\tasync provideCodeActions(document: vscode.TextDocument, range: vscode.Range | vscode.Selection, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\n\t\t\tif (context.only && ImportCodeActions.SourceKind.intersects(context.only)) {\n\t\t\t\treturn this._provideFixAll(document, context, token);\n\t\t\t}\n\n\t\t\treturn this._provideFix(document, range, context, token);\n\t\t}\n\n\t\tprivate async _provideFixAll(document: vscode.TextDocument, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\n\t\t\tconst diagnostics = context.diagnostics\n\t\t\t\t.filter(d => d.code === 2307)\n\t\t\t\t.sort((a, b) => b.range.start.compareTo(a.range.start));\n\n\t\t\tif (diagnostics.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uris = await fileIndex.all(token);\n\t\t\tif (!uris) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = new vscode.CodeAction(`Fix All ESM Imports`, ImportCodeActions.SourceKind);\n\t\t\tresult.edit = new vscode.WorkspaceEdit();\n\t\t\tresult.diagnostics = [];\n\n\t\t\tfor (const diag of diagnostics) {\n\n\t\t\t\tconst actions = this._provideFixesForDiag(document, diag, uris);\n\n\t\t\t\tif (actions.length === 0) {\n\t\t\t\t\tconsole.log(`ESM: no fixes for \"${diag.message}\"`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (actions.length > 1) {\n\t\t\t\t\tconsole.log(`ESM: more than one fix for \"${diag.message}\", taking first`);\n\t\t\t\t\tconsole.log(actions);\n\t\t\t\t}\n\n\t\t\t\tconst [first] = actions;\n\t\t\t\tresult.diagnostics.push(diag);\n\n\t\t\t\tfor (const [uri, edits] of first.edit!.entries()) {\n\t\t\t\t\tresult.edit.set(uri, edits);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log(result.edit.get(document.uri));\n\t\t\treturn [result];\n\t\t}\n\n\t\tprivate async _provideFix(document: vscode.TextDocument, range: vscode.Range | vscode.Selection, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\t\t\tconst uris = await fileIndex.all(token);\n\t\t\tif (!uris) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst diag = context.diagnostics.find(d => d.code === 2307 && d.range.intersection(range));\n\t\t\treturn diag && this._provideFixesForDiag(document, diag, uris);\n\t\t}\n\n\t\tprivate _provideFixesForDiag(document: vscode.TextDocument, diag: vscode.Diagnostic, uris: Iterable<vscode.Uri>): vscode.CodeAction[] {\n\n\t\t\tconst node = findImportAt(document, diag.range.start)?.moduleSpecifier;\n\t\t\tif (!node || !ts.isStringLiteral(node)) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst nodeRange = new vscode.Range(document.positionAt(node.pos), document.positionAt(node.end));\n\t\t\tconst name = path.basename(node.text, path.extname(node.text));\n\n\t\t\tconst result: vscode.CodeAction[] = [];\n\n\t\t\tfor (const item of uris) {\n\t\t\t\tif (path.basename(item.path, path.extname(item.path)) === name) {\n\t\t\t\t\tlet relativePath = path.relative(path.dirname(document.uri.path), item.path).replace(/\\.ts$/, '.js');\n\t\t\t\t\trelativePath = relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n\n\t\t\t\t\tconst action = new vscode.CodeAction(`Fix to '${relativePath}'`, ImportCodeActions.FixKind);\n\t\t\t\t\taction.edit = new vscode.WorkspaceEdit();\n\t\t\t\t\taction.edit.replace(document.uri, nodeRange, ` '${relativePath}'`);\n\t\t\t\t\taction.diagnostics = [diag];\n\t\t\t\t\tresult.push(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tcontext.subscriptions.push(fileIndex);\n\tcontext.subscriptions.push(vscode.languages.registerCompletionItemProvider(selector, completionProvider));\n\tcontext.subscriptions.push(vscode.languages.registerCodeActionsProvider(selector, new ImportCodeActions(), { providedCodeActionKinds: [ImportCodeActions.FixKind, ImportCodeActions.SourceKind] }));\n}\n",
    "contentHash": "741e59394bfc5410",
    "timestamp": 1757742295165
  },
  "/Users/simonvutov/Documents/vscode/.vscode/extensions/vscode-selfhost-import-aid/src/extension.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.vscode/extensions/vscode-selfhost-import-aid/src/extension.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as ts from 'typescript';\nimport * as path from 'path';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\n\tconst fileIndex = new class {\n\n\t\tprivate _currentRun?: Thenable<void>;\n\n\t\tprivate _disposables: vscode.Disposable[] = [];\n\n\t\tprivate readonly _index = new Map<string, vscode.Uri>();\n\n\t\tconstructor() {\n\t\t\tconst watcher = vscode.workspace.createFileSystemWatcher('**/*.ts', false, true, false);\n\t\t\tthis._disposables.push(watcher.onDidChange(e => { this._index.set(e.toString(), e); }));\n\t\t\tthis._disposables.push(watcher.onDidDelete(e => { this._index.delete(e.toString()); }));\n\t\t\tthis._disposables.push(watcher);\n\n\t\t\tthis._refresh(false);\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tfor (const disposable of this._disposables) {\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t\tthis._disposables = [];\n\t\t\tthis._index.clear();\n\t\t}\n\n\t\tasync all(token: vscode.CancellationToken) {\n\n\t\t\tawait Promise.race([this._currentRun, new Promise<void>(resolve => token.onCancellationRequested(resolve))]);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn Array.from(this._index.values());\n\t\t}\n\n\t\tprivate _refresh(clear: boolean) {\n\t\t\t// TODO@jrieken LATEST API! findFiles2New\n\t\t\tthis._currentRun = vscode.workspace.findFiles('src/vs/**/*.ts', '{**/node_modules/**,**/extensions/**}').then(all => {\n\t\t\t\tif (clear) {\n\t\t\t\t\tthis._index.clear();\n\t\t\t\t}\n\t\t\t\tfor (const item of all) {\n\t\t\t\t\tthis._index.set(item.toString(), item);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst selector: vscode.DocumentSelector = 'typescript';\n\n\tfunction findNodeAtPosition(document: vscode.TextDocument, node: ts.Node, position: vscode.Position): ts.Node | undefined {\n\t\tif (node.getStart() <= document.offsetAt(position) && node.getEnd() >= document.offsetAt(position)) {\n\t\t\treturn ts.forEachChild(node, child => findNodeAtPosition(document, child, position)) || node;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tfunction findImportAt(document: vscode.TextDocument, position: vscode.Position): ts.ImportDeclaration | undefined {\n\t\tconst sourceFile = ts.createSourceFile(document.fileName, document.getText(), ts.ScriptTarget.Latest, true);\n\t\tconst node = findNodeAtPosition(document, sourceFile, position);\n\t\tif (node && ts.isStringLiteral(node) && ts.isImportDeclaration(node.parent)) {\n\t\t\treturn node.parent;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tconst completionProvider = new class implements vscode.CompletionItemProvider {\n\t\tasync provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): Promise<vscode.CompletionList | undefined> {\n\n\t\t\tconst index = document.getText().lastIndexOf(' from \\'');\n\t\t\tif (index < 0 || document.positionAt(index).line < position.line) {\n\t\t\t\t// line after last import is before position\n\t\t\t\t// -> no completion, safe a parse call\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst node = findImportAt(document, position);\n\t\t\tif (!node) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst range = new vscode.Range(document.positionAt(node.moduleSpecifier.pos), document.positionAt(node.moduleSpecifier.end));\n\t\t\tconst uris = await fileIndex.all(token);\n\n\t\t\tif (!uris) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = new vscode.CompletionList();\n\t\t\tresult.isIncomplete = true;\n\n\t\t\tfor (const item of uris) {\n\n\t\t\t\tif (!item.path.endsWith('.ts')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet relativePath = path.relative(path.dirname(document.uri.path), item.path);\n\t\t\t\trelativePath = relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n\n\t\t\t\tconst label = path.basename(item.path, path.extname(item.path));\n\t\t\t\tconst insertText = ` '${relativePath.replace(/\\.ts$/, '.js')}'`;\n\t\t\t\tconst filterText = ` '${label}'`;\n\n\t\t\t\tconst completion = new vscode.CompletionItem({\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tdescription: vscode.workspace.asRelativePath(item),\n\t\t\t\t});\n\t\t\t\tcompletion.kind = vscode.CompletionItemKind.File;\n\t\t\t\tcompletion.insertText = insertText;\n\t\t\t\tcompletion.filterText = filterText;\n\t\t\t\tcompletion.range = range;\n\n\t\t\t\tresult.items.push(completion);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t};\n\n\tclass ImportCodeActions implements vscode.CodeActionProvider {\n\n\t\tstatic FixKind = vscode.CodeActionKind.QuickFix.append('esmImport');\n\n\t\tstatic SourceKind = vscode.CodeActionKind.SourceFixAll.append('esmImport');\n\n\t\tasync provideCodeActions(document: vscode.TextDocument, range: vscode.Range | vscode.Selection, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\n\t\t\tif (context.only && ImportCodeActions.SourceKind.intersects(context.only)) {\n\t\t\t\treturn this._provideFixAll(document, context, token);\n\t\t\t}\n\n\t\t\treturn this._provideFix(document, range, context, token);\n\t\t}\n\n\t\tprivate async _provideFixAll(document: vscode.TextDocument, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\n\t\t\tconst diagnostics = context.diagnostics\n\t\t\t\t.filter(d => d.code === 2307)\n\t\t\t\t.sort((a, b) => b.range.start.compareTo(a.range.start));\n\n\t\t\tif (diagnostics.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uris = await fileIndex.all(token);\n\t\t\tif (!uris) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = new vscode.CodeAction(`Fix All ESM Imports`, ImportCodeActions.SourceKind);\n\t\t\tresult.edit = new vscode.WorkspaceEdit();\n\t\t\tresult.diagnostics = [];\n\n\t\t\tfor (const diag of diagnostics) {\n\n\t\t\t\tconst actions = this._provideFixesForDiag(document, diag, uris);\n\n\t\t\t\tif (actions.length === 0) {\n\t\t\t\t\tconsole.log(`ESM: no fixes for \"${diag.message}\"`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (actions.length > 1) {\n\t\t\t\t\tconsole.log(`ESM: more than one fix for \"${diag.message}\", taking first`);\n\t\t\t\t\tconsole.log(actions);\n\t\t\t\t}\n\n\t\t\t\tconst [first] = actions;\n\t\t\t\tresult.diagnostics.push(diag);\n\n\t\t\t\tfor (const [uri, edits] of first.edit!.entries()) {\n\t\t\t\t\tresult.edit.set(uri, edits);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log(result.edit.get(document.uri));\n\t\t\treturn [result];\n\t\t}\n\n\t\tprivate async _provideFix(document: vscode.TextDocument, range: vscode.Range | vscode.Selection, context: vscode.CodeActionContext, token: vscode.CancellationToken): Promise<vscode.CodeAction[] | undefined> {\n\t\t\tconst uris = await fileIndex.all(token);\n\t\t\tif (!uris) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst diag = context.diagnostics.find(d => d.code === 2307 && d.range.intersection(range));\n\t\t\treturn diag && this._provideFixesForDiag(document, diag, uris);\n\t\t}\n\n\t\tprivate _provideFixesForDiag(document: vscode.TextDocument, diag: vscode.Diagnostic, uris: Iterable<vscode.Uri>): vscode.CodeAction[] {\n\n\t\t\tconst node = findImportAt(document, diag.range.start)?.moduleSpecifier;\n\t\t\tif (!node || !ts.isStringLiteral(node)) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst nodeRange = new vscode.Range(document.positionAt(node.pos), document.positionAt(node.end));\n\t\t\tconst name = path.basename(node.text, path.extname(node.text));\n\n\t\t\tconst result: vscode.CodeAction[] = [];\n\n\t\t\tfor (const item of uris) {\n\t\t\t\tif (path.basename(item.path, path.extname(item.path)) === name) {\n\t\t\t\t\tlet relativePath = path.relative(path.dirname(document.uri.path), item.path).replace(/\\.ts$/, '.js');\n\t\t\t\t\trelativePath = relativePath.startsWith('.') ? relativePath : `./${relativePath}`;\n\n\t\t\t\t\tconst action = new vscode.CodeAction(`Fix to '${relativePath}'`, ImportCodeActions.FixKind);\n\t\t\t\t\taction.edit = new vscode.WorkspaceEdit();\n\t\t\t\t\taction.edit.replace(document.uri, nodeRange, ` '${relativePath}'`);\n\t\t\t\t\taction.diagnostics = [diag];\n\t\t\t\t\tresult.push(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tcontext.subscriptions.push(fileIndex);\n\tcontext.subscriptions.push(vscode.languages.registerCompletionItemProvider(selector, completionProvider));\n\tcontext.subscriptions.push(vscode.languages.registerCodeActionsProvider(selector, new ImportCodeActions(), { providedCodeActionKinds: [ImportCodeActions.FixKind, ImportCodeActions.SourceKind] }));\n}\n",
    "contentHash": "741e59394bfc5410",
    "timestamp": 1757742301554
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-import.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-import.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// *********************************************************************\n// *                                                                   *\n// *  We need this to redirect to node_modules from the remote-folder. *\n// *  This ONLY applies when running out of source.                   *\n// *                                                                   *\n// *********************************************************************\n\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { promises } from 'node:fs';\nimport { join } from 'node:path';\n\n// SEE https://nodejs.org/docs/latest/api/module.html#initialize\n\nconst _specifierToUrl: Record<string, string> = {};\n\nexport async function initialize(injectPath: string): Promise<void> {\n\t// populate mappings\n\n\tconst injectPackageJSONPath = fileURLToPath(new URL('../package.json', pathToFileURL(injectPath)));\n\tconst packageJSON = JSON.parse(String(await promises.readFile(injectPackageJSONPath)));\n\n\tfor (const [name] of Object.entries(packageJSON.dependencies)) {\n\t\ttry {\n\t\t\tconst path = join(injectPackageJSONPath, `../node_modules/${name}/package.json`);\n\t\t\tlet { main } = JSON.parse(String(await promises.readFile(path)));\n\n\t\t\tif (!main) {\n\t\t\t\tmain = 'index.js';\n\t\t\t}\n\t\t\tif (!main.endsWith('.js')) {\n\t\t\t\tmain += '.js';\n\t\t\t}\n\t\t\tconst mainPath = join(injectPackageJSONPath, `../node_modules/${name}/${main}`);\n\t\t\t_specifierToUrl[name] = pathToFileURL(mainPath).href;\n\n\t\t} catch (err) {\n\t\t\tconsole.error(name);\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n\n\tconsole.log(`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`);\n}\n\nexport async function resolve(specifier: string | number, context: any, nextResolve: (arg0: any, arg1: any) => any) {\n\n\tconst newSpecifier = _specifierToUrl[specifier];\n\tif (newSpecifier !== undefined) {\n\t\treturn {\n\t\t\tformat: 'commonjs',\n\t\t\tshortCircuit: true,\n\t\t\turl: newSpecifier\n\t\t};\n\t}\n\n\t// Defer to the next hook in the chain, which would be the\n\t// Node.js default resolve if this is the last user-specified loader.\n\treturn nextResolve(specifier, context);\n}\n",
    "contentHash": "b640370b92473b2a",
    "timestamp": 1757742735729
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-fork.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-fork.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from './vs/base/common/performance.js';\nimport { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from './bootstrap-node.js';\nimport { bootstrapESM } from './bootstrap-esm.js';\n\nperformance.mark('code/fork/start');\n\n//#region Helpers\n\nfunction pipeLoggingToParent(): void {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t */\n\tfunction safeToString(args: ArrayLike<unknown>): string {\n\t\tconst seen: unknown[] = [];\n\t\tconst argsArray: unknown[] = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\t\targ = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value: unknown) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\tfunction safeSend(arg: { type: string; severity: string; arguments: string }): void {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\tfunction isObject(obj: unknown): boolean {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\tfunction safeSendConsoleMessage(severity: 'log' | 'warn' | 'error', args: string): void {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t */\n\tfunction wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error'): void {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToString(arguments)); },\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t */\n\tfunction wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error'): void {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk: string | Buffer | Uint8Array, encoding: BufferEncoding | undefined, callback: ((err?: Error | undefined) => void) | undefined) => {\n\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\tif (eol !== -1) {\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n\n\twrapStream('stderr', 'error');\n\twrapStream('stdout', 'log');\n}\n\nfunction handleExceptions(): void {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates(): void {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter(): void {\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\n\tif (crashReporterProcessType) {\n\t\ttry {\n\t\t\t//@ts-ignore\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n\n// Crash reporter\nconfigureCrashReporter();\n\n// Remove global paths from the node module lookup (node.js only)\nremoveGlobalNodeJsModuleLookupPaths();\n\nif (process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Bootstrap ESM\nawait bootstrapESM();\n\n// Load ESM entry point\nawait import([`./${process.env['VSCODE_ESM_ENTRYPOINT']}.js`].join('/') /* workaround: esbuild prints some strange warnings when trying to inline? */);\n",
    "contentHash": "d22748385c8256d7",
    "timestamp": 1757742737171
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-fork.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-fork.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from './vs/base/common/performance.js';\nimport { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from './bootstrap-node.js';\nimport { bootstrapESM } from './bootstrap-esm.js';\n\nperformance.mark('code/fork/start');\n\n//#region Helpers\n\nfunction pipeLoggingToParent(): void {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t */\n\tfunction safeToString(args: ArrayLike<unknown>): string {\n\t\tconst seen: unknown[] = [];\n\t\tconst argsArray: unknown[] = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\t\targ = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value: unknown) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\tfunction safeSend(arg: { type: string; severity: string; arguments: string }): void {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\tfunction isObject(obj: unknown): boolean {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\tfunction safeSendConsoleMessage(severity: 'log' | 'warn' | 'error', args: string): void {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t */\n\tfunction wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error'): void {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToString(arguments)); },\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t */\n\tfunction wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error'): void {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk: string | Buffer | Uint8Array, encoding: BufferEncoding | undefined, callback: ((err?: Error | undefined) => void) | undefined) => {\n\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\tif (eol !== -1) {\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n\n\twrapStream('stderr', 'error');\n\twrapStream('stdout', 'log');\n}\n\nfunction handleExceptions(): void {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates(): void {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter(): void {\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\n\tif (crashReporterProcessType) {\n\t\ttry {\n\t\t\t//@ts-ignore\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n\n// Crash reporter\nconfigureCrashReporter();\n\n// Remove global paths from the node module lookup (node.js only)\nremoveGlobalNodeJsModuleLookupPaths();\n\nif (process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Bootstrap ESM\nawait bootstrapESM();\n\n// Load ESM entry point\nawait import([`./${process.env['VSCODE_ESM_ENTRYPOINT']}.js`].join('/') /* workaround: esbuild prints some strange warnings when trying to inline? */);\n",
    "contentHash": "d22748385c8256d7",
    "timestamp": 1757742739016
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-fork.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-fork.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from './vs/base/common/performance.js';\nimport { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from './bootstrap-node.js';\nimport { bootstrapESM } from './bootstrap-esm.js';\n\nperformance.mark('code/fork/start');\n\n//#region Helpers\n\nfunction pipeLoggingToParent(): void {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t */\n\tfunction safeToString(args: ArrayLike<unknown>): string {\n\t\tconst seen: unknown[] = [];\n\t\tconst argsArray: unknown[] = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\t\targ = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value: unknown) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\tfunction safeSend(arg: { type: string; severity: string; arguments: string }): void {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\tfunction isObject(obj: unknown): boolean {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\tfunction safeSendConsoleMessage(severity: 'log' | 'warn' | 'error', args: string): void {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t */\n\tfunction wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error'): void {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToString(arguments)); },\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t */\n\tfunction wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error'): void {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk: string | Buffer | Uint8Array, encoding: BufferEncoding | undefined, callback: ((err?: Error | undefined) => void) | undefined) => {\n\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\tif (eol !== -1) {\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n\n\twrapStream('stderr', 'error');\n\twrapStream('stdout', 'log');\n}\n\nfunction handleExceptions(): void {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates(): void {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter(): void {\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\n\tif (crashReporterProcessType) {\n\t\ttry {\n\t\t\t//@ts-ignore\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n\n// Crash reporter\nconfigureCrashReporter();\n\n// Remove global paths from the node module lookup (node.js only)\nremoveGlobalNodeJsModuleLookupPaths();\n\nif (process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Bootstrap ESM\nawait bootstrapESM();\n\n// Load ESM entry point\nawait import([`./${process.env['VSCODE_ESM_ENTRYPOINT']}.js`].join('/') /* workaround: esbuild prints some strange warnings when trying to inline? */);\n",
    "contentHash": "d22748385c8256d7",
    "timestamp": 1757742740721
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRequire } from 'node:module';\nimport type { IProductConfiguration } from './vs/base/common/product.js';\n\nconst require = createRequire(import.meta.url);\n\nlet productObj: Partial<IProductConfiguration> & { BUILD_INSERT_PRODUCT_CONFIGURATION?: string } = { BUILD_INSERT_PRODUCT_CONFIGURATION: 'BUILD_INSERT_PRODUCT_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (productObj['BUILD_INSERT_PRODUCT_CONFIGURATION']) {\n\tproductObj = require('../product.json'); // Running out of sources\n}\n\nlet pkgObj = { BUILD_INSERT_PACKAGE_CONFIGURATION: 'BUILD_INSERT_PACKAGE_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (pkgObj['BUILD_INSERT_PACKAGE_CONFIGURATION']) {\n\tpkgObj = require('../package.json'); // Running out of sources\n}\n\nlet productOverridesObj = {};\nif (process.env['VSCODE_DEV']) {\n\ttry {\n\t\tproductOverridesObj = require('../product.overrides.json');\n\t\tproductObj = Object.assign(productObj, productOverridesObj);\n\t} catch (error) { /* ignore */ }\n}\n\nexport const product = productObj;\nexport const pkg = pkgObj;\n",
    "contentHash": "c6b1f161076c0b8c",
    "timestamp": 1757742743581
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-import.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-import.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// *********************************************************************\n// *                                                                   *\n// *  We need this to redirect to node_modules from the remote-folder. *\n// *  This ONLY applies when running out of source.                   *\n// *                                                                   *\n// *********************************************************************\n\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { promises } from 'node:fs';\nimport { join } from 'node:path';\n\n// SEE https://nodejs.org/docs/latest/api/module.html#initialize\n\nconst _specifierToUrl: Record<string, string> = {};\n\nexport async function initialize(injectPath: string): Promise<void> {\n\t// populate mappings\n\n\tconst injectPackageJSONPath = fileURLToPath(new URL('../package.json', pathToFileURL(injectPath)));\n\tconst packageJSON = JSON.parse(String(await promises.readFile(injectPackageJSONPath)));\n\n\tfor (const [name] of Object.entries(packageJSON.dependencies)) {\n\t\ttry {\n\t\t\tconst path = join(injectPackageJSONPath, `../node_modules/${name}/package.json`);\n\t\t\tlet { main } = JSON.parse(String(await promises.readFile(path)));\n\n\t\t\tif (!main) {\n\t\t\t\tmain = 'index.js';\n\t\t\t}\n\t\t\tif (!main.endsWith('.js')) {\n\t\t\t\tmain += '.js';\n\t\t\t}\n\t\t\tconst mainPath = join(injectPackageJSONPath, `../node_modules/${name}/${main}`);\n\t\t\t_specifierToUrl[name] = pathToFileURL(mainPath).href;\n\n\t\t} catch (err) {\n\t\t\tconsole.error(name);\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n\n\tconsole.log(`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`);\n}\n\nexport async function resolve(specifier: string | number, context: any, nextResolve: (arg0: any, arg1: any) => any) {\n\n\tconst newSpecifier = _specifierToUrl[specifier];\n\tif (newSpecifier !== undefined) {\n\t\treturn {\n\t\t\tformat: 'commonjs',\n\t\t\tshortCircuit: true,\n\t\t\turl: newSpecifier\n\t\t};\n\t}\n\n\t// Defer to the next hook in the chain, which would be the\n\t// Node.js default resolve if this is the last user-specified loader.\n\treturn nextResolve(specifier, context);\n}\n",
    "contentHash": "b640370b92473b2a",
    "timestamp": 1757742745467
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// Keep bootstrap-esm.js from redefining 'fs'.\ndelete process.env['ELECTRON_RUN_AS_NODE'];\n",
    "contentHash": "ea2ea1b70333cd39",
    "timestamp": 1757742762146
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// Keep bootstrap-esm.js from redefining 'fs'.\ndelete process.env['ELECTRON_RUN_AS_NODE'];\n",
    "contentHash": "ea2ea1b70333cd39",
    "timestamp": 1757742765934
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// Keep bootstrap-esm.js from redefining 'fs'.\ndelete process.env['ELECTRON_RUN_AS_NODE'];\n",
    "contentHash": "ea2ea1b70333cd39",
    "timestamp": 1757742890670
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-server.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// Keep bootstrap-esm.js from redefining 'fs'.\ndelete process.env['ELECTRON_RUN_AS_NODE'];\n",
    "contentHash": "ea2ea1b70333cd39",
    "timestamp": 1757742935938
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRequire } from 'node:module';\nimport type { IProductConfiguration } from './vs/base/common/product.js';\n\nconst require = createRequire(import.meta.url);\n\nlet productObj: Partial<IProductConfiguration> & { BUILD_INSERT_PRODUCT_CONFIGURATION?: string } = { BUILD_INSERT_PRODUCT_CONFIGURATION: 'BUILD_INSERT_PRODUCT_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (productObj['BUILD_INSERT_PRODUCT_CONFIGURATION']) {\n\tproductObj = require('../product.json'); // Running out of sources\n}\n\nlet pkgObj = { BUILD_INSERT_PACKAGE_CONFIGURATION: 'BUILD_INSERT_PACKAGE_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (pkgObj['BUILD_INSERT_PACKAGE_CONFIGURATION']) {\n\tpkgObj = require('../package.json'); // Running out of sources\n}\n\nlet productOverridesObj = {};\nif (process.env['VSCODE_DEV']) {\n\ttry {\n\t\tproductOverridesObj = require('../product.overrides.json');\n\t\tproductObj = Object.assign(productObj, productOverridesObj);\n\t} catch (error) { /* ignore */ }\n}\n\nexport const product = productObj;\nexport const pkg = pkgObj;\n",
    "contentHash": "c6b1f161076c0b8c",
    "timestamp": 1757742937625
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRequire } from 'node:module';\nimport type { IProductConfiguration } from './vs/base/common/product.js';\n\nconst require = createRequire(import.meta.url);\n\nlet productObj: Partial<IProductConfiguration> & { BUILD_INSERT_PRODUCT_CONFIGURATION?: string } = { BUILD_INSERT_PRODUCT_CONFIGURATION: 'BUILD_INSERT_PRODUCT_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (productObj['BUILD_INSERT_PRODUCT_CONFIGURATION']) {\n\tproductObj = require('../product.json'); // Running out of sources\n}\n\nlet pkgObj = { BUILD_INSERT_PACKAGE_CONFIGURATION: 'BUILD_INSERT_PACKAGE_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (pkgObj['BUILD_INSERT_PACKAGE_CONFIGURATION']) {\n\tpkgObj = require('../package.json'); // Running out of sources\n}\n\nlet productOverridesObj = {};\nif (process.env['VSCODE_DEV']) {\n\ttry {\n\t\tproductOverridesObj = require('../product.overrides.json');\n\t\tproductObj = Object.assign(productObj, productOverridesObj);\n\t} catch (error) { /* ignore */ }\n}\n\nexport const product = productObj;\nexport const pkg = pkgObj;\n",
    "contentHash": "c6b1f161076c0b8c",
    "timestamp": 1757742949978
  },
  "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/src/bootstrap-meta.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRequire } from 'node:module';\nimport type { IProductConfiguration } from './vs/base/common/product.js';\n\nconst require = createRequire(import.meta.url);\n\nlet productObj: Partial<IProductConfiguration> & { BUILD_INSERT_PRODUCT_CONFIGURATION?: string } = { BUILD_INSERT_PRODUCT_CONFIGURATION: 'BUILD_INSERT_PRODUCT_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (productObj['BUILD_INSERT_PRODUCT_CONFIGURATION']) {\n\tproductObj = require('../product.json'); // Running out of sources\n}\n\nlet pkgObj = { BUILD_INSERT_PACKAGE_CONFIGURATION: 'BUILD_INSERT_PACKAGE_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (pkgObj['BUILD_INSERT_PACKAGE_CONFIGURATION']) {\n\tpkgObj = require('../package.json'); // Running out of sources\n}\n\nlet productOverridesObj = {};\nif (process.env['VSCODE_DEV']) {\n\ttry {\n\t\tproductOverridesObj = require('../product.overrides.json');\n\t\tproductObj = Object.assign(productObj, productOverridesObj);\n\t} catch (error) { /* ignore */ }\n}\n\nexport const product = productObj;\nexport const pkg = pkgObj;\n",
    "contentHash": "c6b1f161076c0b8c",
    "timestamp": 1757743034095
  },
  "/Users/simonvutov/Documents/vscode/remote/package.json:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/remote/package.json",
    "level": 3,
    "summary": "Abstraction level 3 + {\n  \"name\": \"vscode-reh\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@microsoft/1ds-core-js\": \"^3.2.13\",\n    \"@microsoft/1ds-post-js\": \"^3.2.13\",\n    \"@parcel/watcher\": \"parcel-bundler/watcher#1ca032aa8339260a8a3bcf825c3a1a71e3e43542\",\n    \"@vscode/deviceid\": \"^0.1.1\",\n    \"@vscode/iconv-lite-umd\": \"0.7.0\",\n    \"@vscode/proxy-agent\": \"^0.33.0\",\n    \"@vscode/ripgrep\": \"^1.15.13\",\n    \"@vscode/spdlog\": \"^0.15.2\",\n    \"@vscode/tree-sitter-wasm\": \"^0.1.4\",\n    \"@vscode/vscode-languagedetection\": \"1.0.21\",\n    \"@vscode/windows-process-tree\": \"^0.6.0\",\n    \"@vscode/windows-registry\": \"^1.1.0\",\n    \"@xterm/addon-clipboard\": \"^0.2.0-beta.102\",\n    \"@xterm/addon-image\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-ligatures\": \"^0.10.0-beta.119\",\n    \"@xterm/addon-progress\": \"^0.2.0-beta.25\",\n    \"@xterm/addon-search\": \"^0.16.0-beta.119\",\n    \"@xterm/addon-serialize\": \"^0.14.0-beta.119\",\n    \"@xterm/addon-unicode11\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-webgl\": \"^0.19.0-beta.119\",\n    \"@xterm/headless\": \"^5.6.0-beta.119\",\n    \"@xterm/xterm\": \"^5.6.0-beta.119\",\n    \"cookie\": \"^0.7.0\",\n    \"http-proxy-agent\": \"^7.0.0\",\n    \"https-proxy-agent\": \"^7.0.2\",\n    \"jschardet\": \"3.1.4\",\n    \"katex\": \"^0.16.22\",\n    \"kerberos\": \"2.1.1\",\n    \"minimist\": \"^1.2.8\",\n    \"native-watchdog\": \"^1.4.1\",\n    \"node-pty\": \"^1.1.0-beta33\",\n    \"tas-client-umd\": \"0.2.0\",\n    \"vscode-oniguruma\": \"1.7.0\",\n    \"vscode-regexpp\": \"^3.1.0\",\n    \"vscode-textmate\": \"9.2.0\",\n    \"yauzl\": \"^3.0.0\",\n    \"yazl\": \"^2.4.3\"\n  },\n  \"overrides\": {\n    \"node-gyp-build\": \"4.8.1\",\n    \"kerberos@2.1.1\": {\n      \"node-addon-api\": \"7.1.0\"\n    }\n  }\n}\n",
    "contentHash": "3acb9131f54d6661",
    "timestamp": 1757782891515
  },
  "/Users/simonvutov/Documents/vscode/remote/package.json:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/remote/package.json",
    "level": 2,
    "summary": "Abstraction level 2 + {\n  \"name\": \"vscode-reh\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@microsoft/1ds-core-js\": \"^3.2.13\",\n    \"@microsoft/1ds-post-js\": \"^3.2.13\",\n    \"@parcel/watcher\": \"parcel-bundler/watcher#1ca032aa8339260a8a3bcf825c3a1a71e3e43542\",\n    \"@vscode/deviceid\": \"^0.1.1\",\n    \"@vscode/iconv-lite-umd\": \"0.7.0\",\n    \"@vscode/proxy-agent\": \"^0.33.0\",\n    \"@vscode/ripgrep\": \"^1.15.13\",\n    \"@vscode/spdlog\": \"^0.15.2\",\n    \"@vscode/tree-sitter-wasm\": \"^0.1.4\",\n    \"@vscode/vscode-languagedetection\": \"1.0.21\",\n    \"@vscode/windows-process-tree\": \"^0.6.0\",\n    \"@vscode/windows-registry\": \"^1.1.0\",\n    \"@xterm/addon-clipboard\": \"^0.2.0-beta.102\",\n    \"@xterm/addon-image\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-ligatures\": \"^0.10.0-beta.119\",\n    \"@xterm/addon-progress\": \"^0.2.0-beta.25\",\n    \"@xterm/addon-search\": \"^0.16.0-beta.119\",\n    \"@xterm/addon-serialize\": \"^0.14.0-beta.119\",\n    \"@xterm/addon-unicode11\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-webgl\": \"^0.19.0-beta.119\",\n    \"@xterm/headless\": \"^5.6.0-beta.119\",\n    \"@xterm/xterm\": \"^5.6.0-beta.119\",\n    \"cookie\": \"^0.7.0\",\n    \"http-proxy-agent\": \"^7.0.0\",\n    \"https-proxy-agent\": \"^7.0.2\",\n    \"jschardet\": \"3.1.4\",\n    \"katex\": \"^0.16.22\",\n    \"kerberos\": \"2.1.1\",\n    \"minimist\": \"^1.2.8\",\n    \"native-watchdog\": \"^1.4.1\",\n    \"node-pty\": \"^1.1.0-beta33\",\n    \"tas-client-umd\": \"0.2.0\",\n    \"vscode-oniguruma\": \"1.7.0\",\n    \"vscode-regexpp\": \"^3.1.0\",\n    \"vscode-textmate\": \"9.2.0\",\n    \"yauzl\": \"^3.0.0\",\n    \"yazl\": \"^2.4.3\"\n  },\n  \"overrides\": {\n    \"node-gyp-build\": \"4.8.1\",\n    \"kerberos@2.1.1\": {\n      \"node-addon-api\": \"7.1.0\"\n    }\n  }\n}\n",
    "contentHash": "3acb9131f54d6661",
    "timestamp": 1757782894828
  },
  "/Users/simonvutov/Documents/vscode/remote/package.json:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/remote/package.json",
    "level": 1,
    "summary": "Abstraction level 1 + {\n  \"name\": \"vscode-reh\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@microsoft/1ds-core-js\": \"^3.2.13\",\n    \"@microsoft/1ds-post-js\": \"^3.2.13\",\n    \"@parcel/watcher\": \"parcel-bundler/watcher#1ca032aa8339260a8a3bcf825c3a1a71e3e43542\",\n    \"@vscode/deviceid\": \"^0.1.1\",\n    \"@vscode/iconv-lite-umd\": \"0.7.0\",\n    \"@vscode/proxy-agent\": \"^0.33.0\",\n    \"@vscode/ripgrep\": \"^1.15.13\",\n    \"@vscode/spdlog\": \"^0.15.2\",\n    \"@vscode/tree-sitter-wasm\": \"^0.1.4\",\n    \"@vscode/vscode-languagedetection\": \"1.0.21\",\n    \"@vscode/windows-process-tree\": \"^0.6.0\",\n    \"@vscode/windows-registry\": \"^1.1.0\",\n    \"@xterm/addon-clipboard\": \"^0.2.0-beta.102\",\n    \"@xterm/addon-image\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-ligatures\": \"^0.10.0-beta.119\",\n    \"@xterm/addon-progress\": \"^0.2.0-beta.25\",\n    \"@xterm/addon-search\": \"^0.16.0-beta.119\",\n    \"@xterm/addon-serialize\": \"^0.14.0-beta.119\",\n    \"@xterm/addon-unicode11\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-webgl\": \"^0.19.0-beta.119\",\n    \"@xterm/headless\": \"^5.6.0-beta.119\",\n    \"@xterm/xterm\": \"^5.6.0-beta.119\",\n    \"cookie\": \"^0.7.0\",\n    \"http-proxy-agent\": \"^7.0.0\",\n    \"https-proxy-agent\": \"^7.0.2\",\n    \"jschardet\": \"3.1.4\",\n    \"katex\": \"^0.16.22\",\n    \"kerberos\": \"2.1.1\",\n    \"minimist\": \"^1.2.8\",\n    \"native-watchdog\": \"^1.4.1\",\n    \"node-pty\": \"^1.1.0-beta33\",\n    \"tas-client-umd\": \"0.2.0\",\n    \"vscode-oniguruma\": \"1.7.0\",\n    \"vscode-regexpp\": \"^3.1.0\",\n    \"vscode-textmate\": \"9.2.0\",\n    \"yauzl\": \"^3.0.0\",\n    \"yazl\": \"^2.4.3\"\n  },\n  \"overrides\": {\n    \"node-gyp-build\": \"4.8.1\",\n    \"kerberos@2.1.1\": {\n      \"node-addon-api\": \"7.1.0\"\n    }\n  }\n}\n",
    "contentHash": "3acb9131f54d6661",
    "timestamp": 1757782896053
  },
  "/Users/simonvutov/Documents/vscode/remote/package.json:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/remote/package.json",
    "level": 5,
    "summary": "Abstraction level 5 + {\n  \"name\": \"vscode-reh\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@microsoft/1ds-core-js\": \"^3.2.13\",\n    \"@microsoft/1ds-post-js\": \"^3.2.13\",\n    \"@parcel/watcher\": \"parcel-bundler/watcher#1ca032aa8339260a8a3bcf825c3a1a71e3e43542\",\n    \"@vscode/deviceid\": \"^0.1.1\",\n    \"@vscode/iconv-lite-umd\": \"0.7.0\",\n    \"@vscode/proxy-agent\": \"^0.33.0\",\n    \"@vscode/ripgrep\": \"^1.15.13\",\n    \"@vscode/spdlog\": \"^0.15.2\",\n    \"@vscode/tree-sitter-wasm\": \"^0.1.4\",\n    \"@vscode/vscode-languagedetection\": \"1.0.21\",\n    \"@vscode/windows-process-tree\": \"^0.6.0\",\n    \"@vscode/windows-registry\": \"^1.1.0\",\n    \"@xterm/addon-clipboard\": \"^0.2.0-beta.102\",\n    \"@xterm/addon-image\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-ligatures\": \"^0.10.0-beta.119\",\n    \"@xterm/addon-progress\": \"^0.2.0-beta.25\",\n    \"@xterm/addon-search\": \"^0.16.0-beta.119\",\n    \"@xterm/addon-serialize\": \"^0.14.0-beta.119\",\n    \"@xterm/addon-unicode11\": \"^0.9.0-beta.119\",\n    \"@xterm/addon-webgl\": \"^0.19.0-beta.119\",\n    \"@xterm/headless\": \"^5.6.0-beta.119\",\n    \"@xterm/xterm\": \"^5.6.0-beta.119\",\n    \"cookie\": \"^0.7.0\",\n    \"http-proxy-agent\": \"^7.0.0\",\n    \"https-proxy-agent\": \"^7.0.2\",\n    \"jschardet\": \"3.1.4\",\n    \"katex\": \"^0.16.22\",\n    \"kerberos\": \"2.1.1\",\n    \"minimist\": \"^1.2.8\",\n    \"native-watchdog\": \"^1.4.1\",\n    \"node-pty\": \"^1.1.0-beta33\",\n    \"tas-client-umd\": \"0.2.0\",\n    \"vscode-oniguruma\": \"1.7.0\",\n    \"vscode-regexpp\": \"^3.1.0\",\n    \"vscode-textmate\": \"9.2.0\",\n    \"yauzl\": \"^3.0.0\",\n    \"yazl\": \"^2.4.3\"\n  },\n  \"overrides\": {\n    \"node-gyp-build\": \"4.8.1\",\n    \"kerberos@2.1.1\": {\n      \"node-addon-api\": \"7.1.0\"\n    }\n  }\n}\n",
    "contentHash": "3acb9131f54d6661",
    "timestamp": 1757782897774
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-deep-import-of-internal.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-deep-import-of-internal.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tnoDeepImportOfInternal: 'No deep import of internal modules allowed! Use a re-export from a non-internal module instead. Internal modules can only be imported by direct parents (any module in {{parentDir}}).'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'boolean'\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tconst patterns = context.options[0] as Record<string, boolean>;\n\t\tconst internalModulePattern = Object.entries(patterns).map(([key, v]) => v ? key : undefined).filter(v => !!v);\n\t\tconst allowedPatterns = Object.entries(patterns).map(([key, v]) => !v ? key : undefined).filter(v => !!v);\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tconst importerModuleDir = dirname(context.filename);\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(importerModuleDir, path);\n\t\t\t}\n\t\t\tconst importedModulePath = path;\n\n\t\t\tconst importerDirParts = splitParts(importerModuleDir);\n\t\t\tconst importedModuleParts = splitParts(importedModulePath);\n\n\t\t\tfor (let i = 0; i < importedModuleParts.length; i++) {\n\t\t\t\tif (internalModulePattern.some(p => importedModuleParts[i].match(p)) && allowedPatterns.every(p => !importedModuleParts[i].match(p))) {\n\t\t\t\t\tconst importerDirJoined = importerDirParts.join('/');\n\t\t\t\t\tconst expectedParentDir = importedModuleParts.slice(0, i).join('/');\n\t\t\t\t\tif (!importerDirJoined.startsWith(expectedParentDir)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessageId: 'noDeepImportOfInternal',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tparentDir: expectedParentDir\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\nfunction splitParts(path: string): string[] {\n\treturn path.split(/\\\\|\\//);\n}\n",
    "contentHash": "7493f5348d649bf8",
    "timestamp": 1757799066814
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\ntype Config = {\n\tallowed: Set<string>;\n\tdisallowed: Set<string>;\n};\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'Bad layering. You are not allowed to access {{from}} from here, allowed layers are: [{{allowed}}]'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst fileDirname = dirname(context.getFilename());\n\t\tconst parts = fileDirname.split(/\\\\|\\//);\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tlet config: Config | undefined;\n\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\tif (ruleArgs[parts[i]]) {\n\t\t\t\tconfig = {\n\t\t\t\t\tallowed: new Set(ruleArgs[parts[i]]).add(parts[i]),\n\t\t\t\t\tdisallowed: new Set()\n\t\t\t\t};\n\t\t\t\tObject.keys(ruleArgs).forEach(key => {\n\t\t\t\t\tif (!config!.allowed.has(key)) {\n\t\t\t\t\t\tconfig!.disallowed.add(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!config) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(dirname(context.getFilename()), path);\n\t\t\t}\n\n\t\t\tconst parts = dirname(path).split(/\\\\|\\//);\n\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tif (config!.allowed.has(part)) {\n\t\t\t\t\t// GOOD - same layer\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (config!.disallowed.has(part)) {\n\t\t\t\t\t// BAD - wrong layer\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tloc: node.loc,\n\t\t\t\t\t\tmessageId: 'layerbreaker',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tfrom: part,\n\t\t\t\t\t\t\tallowed: [...config!.allowed.keys()].join(', ')\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n",
    "contentHash": "94cec6eda93f836c",
    "timestamp": 1757799066817
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\ntype Config = {\n\tallowed: Set<string>;\n\tdisallowed: Set<string>;\n};\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'Bad layering. You are not allowed to access {{from}} from here, allowed layers are: [{{allowed}}]'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst fileDirname = dirname(context.getFilename());\n\t\tconst parts = fileDirname.split(/\\\\|\\//);\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tlet config: Config | undefined;\n\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\tif (ruleArgs[parts[i]]) {\n\t\t\t\tconfig = {\n\t\t\t\t\tallowed: new Set(ruleArgs[parts[i]]).add(parts[i]),\n\t\t\t\t\tdisallowed: new Set()\n\t\t\t\t};\n\t\t\t\tObject.keys(ruleArgs).forEach(key => {\n\t\t\t\t\tif (!config!.allowed.has(key)) {\n\t\t\t\t\t\tconfig!.disallowed.add(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!config) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(dirname(context.getFilename()), path);\n\t\t\t}\n\n\t\t\tconst parts = dirname(path).split(/\\\\|\\//);\n\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tif (config!.allowed.has(part)) {\n\t\t\t\t\t// GOOD - same layer\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (config!.disallowed.has(part)) {\n\t\t\t\t\t// BAD - wrong layer\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tloc: node.loc,\n\t\t\t\t\t\tmessageId: 'layerbreaker',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tfrom: part,\n\t\t\t\t\t\t\tallowed: [...config!.allowed.keys()].join(', ')\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n",
    "contentHash": "94cec6eda93f836c",
    "timestamp": 1757799070515
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\ntype Config = {\n\tallowed: Set<string>;\n\tdisallowed: Set<string>;\n};\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'Bad layering. You are not allowed to access {{from}} from here, allowed layers are: [{{allowed}}]'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst fileDirname = dirname(context.getFilename());\n\t\tconst parts = fileDirname.split(/\\\\|\\//);\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tlet config: Config | undefined;\n\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\tif (ruleArgs[parts[i]]) {\n\t\t\t\tconfig = {\n\t\t\t\t\tallowed: new Set(ruleArgs[parts[i]]).add(parts[i]),\n\t\t\t\t\tdisallowed: new Set()\n\t\t\t\t};\n\t\t\t\tObject.keys(ruleArgs).forEach(key => {\n\t\t\t\t\tif (!config!.allowed.has(key)) {\n\t\t\t\t\t\tconfig!.disallowed.add(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!config) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(dirname(context.getFilename()), path);\n\t\t\t}\n\n\t\t\tconst parts = dirname(path).split(/\\\\|\\//);\n\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tif (config!.allowed.has(part)) {\n\t\t\t\t\t// GOOD - same layer\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (config!.disallowed.has(part)) {\n\t\t\t\t\t// BAD - wrong layer\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tloc: node.loc,\n\t\t\t\t\t\tmessageId: 'layerbreaker',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tfrom: part,\n\t\t\t\t\t\t\tallowed: [...config!.allowed.keys()].join(', ')\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n",
    "contentHash": "94cec6eda93f836c",
    "timestamp": 1757799071972
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts",
    "level": 5,
    "summary": "Abstraction level 5 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\ntype Config = {\n\tallowed: Set<string>;\n\tdisallowed: Set<string>;\n};\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'Bad layering. You are not allowed to access {{from}} from here, allowed layers are: [{{allowed}}]'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst fileDirname = dirname(context.getFilename());\n\t\tconst parts = fileDirname.split(/\\\\|\\//);\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tlet config: Config | undefined;\n\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\tif (ruleArgs[parts[i]]) {\n\t\t\t\tconfig = {\n\t\t\t\t\tallowed: new Set(ruleArgs[parts[i]]).add(parts[i]),\n\t\t\t\t\tdisallowed: new Set()\n\t\t\t\t};\n\t\t\t\tObject.keys(ruleArgs).forEach(key => {\n\t\t\t\t\tif (!config!.allowed.has(key)) {\n\t\t\t\t\t\tconfig!.disallowed.add(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!config) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(dirname(context.getFilename()), path);\n\t\t\t}\n\n\t\t\tconst parts = dirname(path).split(/\\\\|\\//);\n\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tif (config!.allowed.has(part)) {\n\t\t\t\t\t// GOOD - same layer\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (config!.disallowed.has(part)) {\n\t\t\t\t\t// BAD - wrong layer\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tloc: node.loc,\n\t\t\t\t\t\tmessageId: 'layerbreaker',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tfrom: part,\n\t\t\t\t\t\t\tallowed: [...config!.allowed.keys()].join(', ')\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n",
    "contentHash": "94cec6eda93f836c",
    "timestamp": 1757799074989
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-layering.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\ntype Config = {\n\tallowed: Set<string>;\n\tdisallowed: Set<string>;\n};\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'Bad layering. You are not allowed to access {{from}} from here, allowed layers are: [{{allowed}}]'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst fileDirname = dirname(context.getFilename());\n\t\tconst parts = fileDirname.split(/\\\\|\\//);\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tlet config: Config | undefined;\n\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\tif (ruleArgs[parts[i]]) {\n\t\t\t\tconfig = {\n\t\t\t\t\tallowed: new Set(ruleArgs[parts[i]]).add(parts[i]),\n\t\t\t\t\tdisallowed: new Set()\n\t\t\t\t};\n\t\t\t\tObject.keys(ruleArgs).forEach(key => {\n\t\t\t\t\tif (!config!.allowed.has(key)) {\n\t\t\t\t\t\tconfig!.disallowed.add(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!config) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(dirname(context.getFilename()), path);\n\t\t\t}\n\n\t\t\tconst parts = dirname(path).split(/\\\\|\\//);\n\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tif (config!.allowed.has(part)) {\n\t\t\t\t\t// GOOD - same layer\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (config!.disallowed.has(part)) {\n\t\t\t\t\t// BAD - wrong layer\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tloc: node.loc,\n\t\t\t\t\t\tmessageId: 'layerbreaker',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tfrom: part,\n\t\t\t\t\t\t\tallowed: [...config!.allowed.keys()].join(', ')\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n",
    "contentHash": "94cec6eda93f836c",
    "timestamp": 1757799103695
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-deep-import-of-internal.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-deep-import-of-internal.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { join, dirname } from 'path';\nimport { createImportRuleListener } from './utils';\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tnoDeepImportOfInternal: 'No deep import of internal modules allowed! Use a re-export from a non-internal module instead. Internal modules can only be imported by direct parents (any module in {{parentDir}}).'\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'boolean'\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tconst patterns = context.options[0] as Record<string, boolean>;\n\t\tconst internalModulePattern = Object.entries(patterns).map(([key, v]) => v ? key : undefined).filter(v => !!v);\n\t\tconst allowedPatterns = Object.entries(patterns).map(([key, v]) => !v ? key : undefined).filter(v => !!v);\n\n\t\treturn createImportRuleListener((node, path) => {\n\t\t\tconst importerModuleDir = dirname(context.filename);\n\t\t\tif (path[0] === '.') {\n\t\t\t\tpath = join(importerModuleDir, path);\n\t\t\t}\n\t\t\tconst importedModulePath = path;\n\n\t\t\tconst importerDirParts = splitParts(importerModuleDir);\n\t\t\tconst importedModuleParts = splitParts(importedModulePath);\n\n\t\t\tfor (let i = 0; i < importedModuleParts.length; i++) {\n\t\t\t\tif (internalModulePattern.some(p => importedModuleParts[i].match(p)) && allowedPatterns.every(p => !importedModuleParts[i].match(p))) {\n\t\t\t\t\tconst importerDirJoined = importerDirParts.join('/');\n\t\t\t\t\tconst expectedParentDir = importedModuleParts.slice(0, i).join('/');\n\t\t\t\t\tif (!importerDirJoined.startsWith(expectedParentDir)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessageId: 'noDeepImportOfInternal',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tparentDir: expectedParentDir\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\nfunction splitParts(path: string): string[] {\n\treturn path.split(/\\\\|\\//);\n}\n",
    "contentHash": "7493f5348d649bf8",
    "timestamp": 1757799110823
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { dirname, relative } from 'path';\nimport minimatch from 'minimatch';\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'You are only allowed to define limited top level functions.'\n\t\t},\n\t\tschema: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tlet fileRelativePath = relative(dirname(__dirname), context.getFilename());\n\t\tif (!fileRelativePath.endsWith('/')) {\n\t\t\tfileRelativePath += '/';\n\t\t}\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tconst matchingKey = Object.keys(ruleArgs).find(key => fileRelativePath.startsWith(key) || minimatch(fileRelativePath, key));\n\t\tif (!matchingKey) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\tconst restrictedFunctions = ruleArgs[matchingKey];\n\n\t\treturn {\n\t\t\tFunctionDeclaration: (node: any) => {\n\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\tconst functionName = node.id.name;\n\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.id.name)) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tExportNamedDeclaration(node: any) {\n\t\t\t\tif (node.declaration && node.declaration.type === 'FunctionDeclaration') {\n\t\t\t\t\tconst functionName = node.declaration.id.name;\n\t\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.declaration.id.name)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "4f5269a32cc26202",
    "timestamp": 1757799112041
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-potentially-unsafe-disposables.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-potentially-unsafe-disposables.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\n/**\n * Checks for potentially unsafe usage of `DisposableStore` / `MutableDisposable`.\n *\n * These have been the source of leaks in the past.\n */\nexport = new class implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction checkVariableDeclaration(inNode: any) {\n\t\t\tcontext.report({\n\t\t\t\tnode: inNode,\n\t\t\t\tmessage: `Use const for 'DisposableStore' to avoid leaks by accidental reassignment.`\n\t\t\t});\n\t\t}\n\n\t\tfunction checkProperty(inNode: any) {\n\t\t\tcontext.report({\n\t\t\t\tnode: inNode,\n\t\t\t\tmessage: `Use readonly for DisposableStore/MutableDisposable to avoid leaks through accidental reassignment.`\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t'VariableDeclaration[kind!=\"const\"] NewExpression[callee.name=\"DisposableStore\"]': checkVariableDeclaration,\n\n\t\t\t'PropertyDefinition[readonly!=true][typeAnnotation.typeAnnotation.typeName.name=/DisposableStore|MutableDisposable/]': checkProperty,\n\t\t\t'PropertyDefinition[readonly!=true] NewExpression[callee.name=/DisposableStore|MutableDisposable/]': checkProperty,\n\t\t};\n\t}\n};\n",
    "contentHash": "587d2c9790493929",
    "timestamp": 1757799113038
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-potentially-unsafe-disposables.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-potentially-unsafe-disposables.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\n/**\n * Checks for potentially unsafe usage of `DisposableStore` / `MutableDisposable`.\n *\n * These have been the source of leaks in the past.\n */\nexport = new class implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction checkVariableDeclaration(inNode: any) {\n\t\t\tcontext.report({\n\t\t\t\tnode: inNode,\n\t\t\t\tmessage: `Use const for 'DisposableStore' to avoid leaks by accidental reassignment.`\n\t\t\t});\n\t\t}\n\n\t\tfunction checkProperty(inNode: any) {\n\t\t\tcontext.report({\n\t\t\t\tnode: inNode,\n\t\t\t\tmessage: `Use readonly for DisposableStore/MutableDisposable to avoid leaks through accidental reassignment.`\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t'VariableDeclaration[kind!=\"const\"] NewExpression[callee.name=\"DisposableStore\"]': checkVariableDeclaration,\n\n\t\t\t'PropertyDefinition[readonly!=true][typeAnnotation.typeAnnotation.typeName.name=/DisposableStore|MutableDisposable/]': checkProperty,\n\t\t\t'PropertyDefinition[readonly!=true] NewExpression[callee.name=/DisposableStore|MutableDisposable/]': checkProperty,\n\t\t};\n\t}\n};\n",
    "contentHash": "587d2c9790493929",
    "timestamp": 1757799207534
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoGlobalDocumentListener implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\treturn {\n\t\t\tCallExpression(node: any) {\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\tnode.callee.name === 'addDisposableListener' ||\n\t\t\t\t\t\tnode.callee.property?.name === 'addDisposableListener'\n\t\t\t\t\t) &&\n\t\t\t\t\tnode.arguments.length > 0 &&\n\t\t\t\t\tnode.arguments[0].type === 'Identifier' &&\n\t\t\t\t\tnode.arguments[0].name === 'document'\n\t\t\t\t) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Use <targetWindow>.document to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "19fd56d18cfce5d2",
    "timestamp": 1757800408450
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoGlobalDocumentListener implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\treturn {\n\t\t\tCallExpression(node: any) {\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\tnode.callee.name === 'addDisposableListener' ||\n\t\t\t\t\t\tnode.callee.property?.name === 'addDisposableListener'\n\t\t\t\t\t) &&\n\t\t\t\t\tnode.arguments.length > 0 &&\n\t\t\t\t\tnode.arguments[0].type === 'Identifier' &&\n\t\t\t\t\tnode.arguments[0].name === 'document'\n\t\t\t\t) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Use <targetWindow>.document to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "19fd56d18cfce5d2",
    "timestamp": 1757799220817
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoGlobalDocumentListener implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\treturn {\n\t\t\tCallExpression(node: any) {\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\tnode.callee.name === 'addDisposableListener' ||\n\t\t\t\t\t\tnode.callee.property?.name === 'addDisposableListener'\n\t\t\t\t\t) &&\n\t\t\t\t\tnode.arguments.length > 0 &&\n\t\t\t\t\tnode.arguments[0].type === 'Identifier' &&\n\t\t\t\t\tnode.arguments[0].name === 'document'\n\t\t\t\t) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Use <targetWindow>.document to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nconst VALID_USES = new Set<TSESTree.AST_NODE_TYPES | undefined>([\n\tTSESTree.AST_NODE_TYPES.AwaitExpression,\n\tTSESTree.AST_NODE_TYPES.VariableDeclarator,\n]);\n\nexport = new class MustUseResults implements eslint.Rule.RuleModule {\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tschema: false\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst config = <{ message: string; functions: string[] }[]>context.options[0];\n\t\tconst listener: eslint.Rule.RuleListener = {};\n\n\t\tfor (const { message, functions } of config) {\n\t\t\tfor (const fn of functions) {\n\t\t\t\tconst query = `CallExpression[callee.property.name='${fn}'], CallExpression[callee.name='${fn}']`;\n\t\t\t\tlistener[query] = (node: any) => {\n\t\t\t\t\tconst cast: TSESTree.CallExpression = node;\n\t\t\t\t\tif (!VALID_USES.has(cast.parent?.type)) {\n\t\t\t\t\t\tcontext.report({ node, message });\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn listener;\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nconst VALID_USES = new Set<TSESTree.AST_NODE_TYPES | undefined>([\n\tTSESTree.AST_NODE_TYPES.AwaitExpression,\n\tTSESTree.AST_NODE_TYPES.VariableDeclarator,\n]);\n\nexport = new class MustUseResults implements eslint.Rule.RuleModule {\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tschema: false\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst config = <{ message: string; functions: string[] }[]>context.options[0];\n\t\tconst listener: eslint.Rule.RuleListener = {};\n\n\t\tfor (const { message, functions } of config) {\n\t\t\tfor (const fn of functions) {\n\t\t\t\tconst query = `CallExpression[callee.property.name='${fn}'], CallExpression[callee.name='${fn}']`;\n\t\t\t\tlistener[query] = (node: any) => {\n\t\t\t\t\tconst cast: TSESTree.CallExpression = node;\n\t\t\t\t\tif (!VALID_USES.has(cast.parent?.type)) {\n\t\t\t\t\t\tcontext.report({ node, message });\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn listener;\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nconst VALID_USES = new Set<TSESTree.AST_NODE_TYPES | undefined>([\n\tTSESTree.AST_NODE_TYPES.AwaitExpression,\n\tTSESTree.AST_NODE_TYPES.VariableDeclarator,\n]);\n\nexport = new class MustUseResults implements eslint.Rule.RuleModule {\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tschema: false\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst config = <{ message: string; functions: string[] }[]>context.options[0];\n\t\tconst listener: eslint.Rule.RuleListener = {};\n\n\t\tfor (const { message, functions } of config) {\n\t\t\tfor (const fn of functions) {\n\t\t\t\tconst query = `CallExpression[callee.property.name='${fn}'], CallExpression[callee.name='${fn}']`;\n\t\t\t\tlistener[query] = (node: any) => {\n\t\t\t\t\tconst cast: TSESTree.CallExpression = node;\n\t\t\t\t\tif (!VALID_USES.has(cast.parent?.type)) {\n\t\t\t\t\t\tcontext.report({ node, message });\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn listener;\n\t}\n};\n",
    "contentHash": "b165ae9fa4bcbb2e",
    "timestamp": 1757800299937
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoGlobalDocumentListener implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\treturn {\n\t\t\tCallExpression(node: any) {\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\tnode.callee.name === 'addDisposableListener' ||\n\t\t\t\t\t\tnode.callee.property?.name === 'addDisposableListener'\n\t\t\t\t\t) &&\n\t\t\t\t\tnode.arguments.length > 0 &&\n\t\t\t\t\tnode.arguments[0].type === 'Identifier' &&\n\t\t\t\t\tnode.arguments[0].name === 'document'\n\t\t\t\t) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Use <targetWindow>.document to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "19fd56d18cfce5d2",
    "timestamp": 1757799225709
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-global-document-listener.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. [Empty line]\n8. Code execution: export = new class NoGlobalDocumentListe...\n9. [Empty line]\n10. Code execution: create(context: eslint.Rule.RuleContext)...\n11. Return statement\n12. Code execution: CallExpression(node: any) {\n13. Conditional logic\n14. Code execution: (\n15. Code execution: node.callee.name === 'addDisposableListe...\n16. Code execution: node.callee.property?.name === 'addDispo...\n17. Code execution: ) &&\n18. Code execution: node.arguments.length > 0 &&\n19. Conditional logic\n20. Code execution: node.arguments[0].name === 'document'\n21. Code execution: ) {\n22. Code execution: context.report({\n23. Code execution: node,\n24. Declaration/definition\n25. Code execution: });\n26. Block delimiter\n27. Code execution: },\n28. Code execution: };\n29. Block delimiter\n30. Code execution: };\n31. Comment: /*------------------------------------------------...\n32. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n33. Comment: *  Licensed under the MIT License. See License.txt...\n34. Comment: *-------------------------------------------------...\n35. [Empty line]\n36. Import statement\n37. Import statement\n38. [Empty line]\n39. Declaration/definition\n40. Code execution: TSESTree.AST_NODE_TYPES.AwaitExpression,\n41. Code execution: TSESTree.AST_NODE_TYPES.VariableDeclarat...\n42. Code execution: ]);\n43. [Empty line]\n44. Code execution: export = new class MustUseResults implem...\n45. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n46. Code execution: schema: false\n47. Code execution: };\n48. [Empty line]\n49. Code execution: create(context: eslint.Rule.RuleContext)...\n50. [Empty line]\n51. Declaration/definition\n52. Declaration/definition\n53. [Empty line]\n54. Declaration/definition\n55. Declaration/definition\n56. Declaration/definition\n57. Code execution: listener[query] = (node: any) => {\n58. Declaration/definition\n59. Conditional logic\n60. Code execution: context.report({ node, message });\n61. Block delimiter\n62. Code execution: };\n63. Block delimiter\n64. Block delimiter\n65. [Empty line]\n66. Return statement\n67. Block delimiter\n68. Code execution: };\n69. Comment: /*------------------------------------------------...\n70. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n71. Comment: *  Licensed under the MIT License. See License.txt...\n72. Comment: *-------------------------------------------------...\n73. [Empty line]\n74. Import statement\n75. Import statement\n76. [Empty line]\n77. Declaration/definition\n78. Code execution: TSESTree.AST_NODE_TYPES.AwaitExpression,\n79. Code execution: TSESTree.AST_NODE_TYPES.VariableDeclarat...\n80. Code execution: ]);\n81. [Empty line]\n82. Code execution: export = new class MustUseResults implem...\n83. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n84. Code execution: schema: false\n85. Code execution: };\n86. [Empty line]\n87. Code execution: create(context: eslint.Rule.RuleContext)...\n88. [Empty line]\n89. Declaration/definition\n90. Declaration/definition\n91. [Empty line]\n92. Declaration/definition\n93. Declaration/definition\n94. Declaration/definition\n95. Code execution: listener[query] = (node: any) => {\n96. Declaration/definition\n97. Conditional logic\n98. Code execution: context.report({ node, message });\n99. Block delimiter\n100. Code execution: };\n101. Block delimiter\n102. Block delimiter\n103. [Empty line]\n104. Return statement\n105. Block delimiter\n106. Code execution: };\n107. Comment: /*------------------------------------------------...\n108. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n109. Comment: *  Licensed under the MIT License. See License.txt...\n110. Comment: *-------------------------------------------------...\n111. [Empty line]\n112. Import statement\n113. Import statement\n114. [Empty line]\n115. Declaration/definition\n116. Code execution: TSESTree.AST_NODE_TYPES.AwaitExpression,\n117. Code execution: TSESTree.AST_NODE_TYPES.VariableDeclarat...\n118. Code execution: ]);\n119. [Empty line]\n120. Code execution: export = new class MustUseResults implem...\n121. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n122. Code execution: schema: false\n123. Code execution: };\n124. [Empty line]\n125. Code execution: create(context: eslint.Rule.RuleContext)...\n126. [Empty line]\n127. Declaration/definition\n128. Declaration/definition\n129. [Empty line]\n130. Declaration/definition\n131. Declaration/definition\n132. Declaration/definition\n133. Code execution: listener[query] = (node: any) => {\n134. Declaration/definition\n135. Conditional logic\n136. Code execution: context.report({ node, message });\n137. Block delimiter\n138. Code execution: };\n139. Block delimiter\n140. Block delimiter\n141. [Empty line]\n142. Return statement\n143. Block delimiter\n144. Code execution: };\n145. [Empty line]",
    "contentHash": "b165ae9fa4bcbb2e",
    "timestamp": 1757800291065
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts",
    "level": 5,
    "summary": "Abstraction level 5 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoAsyncSuite implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction doesCallSuperDispose(node: any) {\n\n\t\t\tif (!node.override) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst body = context.getSourceCode().getText(node);\n\n\t\t\tif (body.includes('super.dispose')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'dispose() should call super.dispose()'\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t['MethodDefinition[override][key.name=\"dispose\"]']: doesCallSuperDispose,\n\t\t};\n\t}\n};\n",
    "contentHash": "231d523838641ba5",
    "timestamp": 1757799231902
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoAsyncSuite implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction doesCallSuperDispose(node: any) {\n\n\t\t\tif (!node.override) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst body = context.getSourceCode().getText(node);\n\n\t\t\tif (body.includes('super.dispose')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'dispose() should call super.dispose()'\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t['MethodDefinition[override][key.name=\"dispose\"]']: doesCallSuperDispose,\n\t\t};\n\t}\n};\n",
    "contentHash": "231d523838641ba5",
    "timestamp": 1757799233804
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoAsyncSuite implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction doesCallSuperDispose(node: any) {\n\n\t\t\tif (!node.override) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst body = context.getSourceCode().getText(node);\n\n\t\t\tif (body.includes('super.dispose')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'dispose() should call super.dispose()'\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t['MethodDefinition[override][key.name=\"dispose\"]']: doesCallSuperDispose,\n\t\t};\n\t}\n};\n",
    "contentHash": "231d523838641ba5",
    "timestamp": 1757799234736
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoAsyncSuite implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction doesCallSuperDispose(node: any) {\n\n\t\t\tif (!node.override) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst body = context.getSourceCode().getText(node);\n\n\t\t\tif (body.includes('super.dispose')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'dispose() should call super.dispose()'\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t['MethodDefinition[override][key.name=\"dispose\"]']: doesCallSuperDispose,\n\t\t};\n\t}\n};\n",
    "contentHash": "231d523838641ba5",
    "timestamp": 1757799236520
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-super-dispose.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class NoAsyncSuite implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tfunction doesCallSuperDispose(node: any) {\n\n\t\t\tif (!node.override) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst body = context.getSourceCode().getText(node);\n\n\t\t\tif (body.includes('super.dispose')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'dispose() should call super.dispose()'\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\t['MethodDefinition[override][key.name=\"dispose\"]']: doesCallSuperDispose,\n\t\t};\n\t}\n};\n",
    "contentHash": "231d523838641ba5",
    "timestamp": 1757799239286
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nexport = new class NoDangerousTypeAssertions implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\t// Disable in tests for now\n\t\tif (context.getFilename().includes('.test')) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\t// Disallow type assertions on object literals: <T>{ ... } or {} as T\n\t\t\t['TSTypeAssertion > ObjectExpression, TSAsExpression > ObjectExpression']: (node: any) => {\n\t\t\t\tconst objectNode = node as TSESTree.Node;\n\n\t\t\t\tconst parent = objectNode.parent as TSESTree.TSTypeAssertion | TSESTree.TSAsExpression;\n\t\t\t\tif (\n\t\t\t\t\t// Allow `as const` assertions\n\t\t\t\t\t(parent.typeAnnotation.type === 'TSTypeReference' && parent.typeAnnotation.typeName.type === 'Identifier' && parent.typeAnnotation.typeName.name === 'const')\n\n\t\t\t\t\t// For also now still allow `any` casts\n\t\t\t\t\t|| (parent.typeAnnotation.type === 'TSAnyKeyword')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Don't use type assertions for creating objects as this can hide type errors.`\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "c6f93c8f5a77cfbb",
    "timestamp": 1757799352291
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nexport = new class NoDangerousTypeAssertions implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\t// Disable in tests for now\n\t\tif (context.getFilename().includes('.test')) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\t// Disallow type assertions on object literals: <T>{ ... } or {} as T\n\t\t\t['TSTypeAssertion > ObjectExpression, TSAsExpression > ObjectExpression']: (node: any) => {\n\t\t\t\tconst objectNode = node as TSESTree.Node;\n\n\t\t\t\tconst parent = objectNode.parent as TSESTree.TSTypeAssertion | TSESTree.TSAsExpression;\n\t\t\t\tif (\n\t\t\t\t\t// Allow `as const` assertions\n\t\t\t\t\t(parent.typeAnnotation.type === 'TSTypeReference' && parent.typeAnnotation.typeName.type === 'Identifier' && parent.typeAnnotation.typeName.name === 'const')\n\n\t\t\t\t\t// For also now still allow `any` casts\n\t\t\t\t\t|| (parent.typeAnnotation.type === 'TSAnyKeyword')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Don't use type assertions for creating objects as this can hide type errors.`\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "c6f93c8f5a77cfbb",
    "timestamp": 1757799354803
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nexport = new class NoDangerousTypeAssertions implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\t// Disable in tests for now\n\t\tif (context.getFilename().includes('.test')) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\t// Disallow type assertions on object literals: <T>{ ... } or {} as T\n\t\t\t['TSTypeAssertion > ObjectExpression, TSAsExpression > ObjectExpression']: (node: any) => {\n\t\t\t\tconst objectNode = node as TSESTree.Node;\n\n\t\t\t\tconst parent = objectNode.parent as TSESTree.TSTypeAssertion | TSESTree.TSAsExpression;\n\t\t\t\tif (\n\t\t\t\t\t// Allow `as const` assertions\n\t\t\t\t\t(parent.typeAnnotation.type === 'TSTypeReference' && parent.typeAnnotation.typeName.type === 'Identifier' && parent.typeAnnotation.typeName.name === 'const')\n\n\t\t\t\t\t// For also now still allow `any` casts\n\t\t\t\t\t|| (parent.typeAnnotation.type === 'TSAnyKeyword')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Don't use type assertions for creating objects as this can hide type errors.`\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "c6f93c8f5a77cfbb",
    "timestamp": 1757799359519
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class ApiProviderNaming implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tslow: 'Native private fields are much slower and should only be used when needed. Ignore this warning if you know what you are doing, use compile-time private otherwise. See https://github.com/microsoft/vscode/issues/185991#issuecomment-1614468158 for details',\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\treturn {\n\t\t\t['PropertyDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t},\n\t\t\t['MethodDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "fa7e1ab681d5a0f2",
    "timestamp": 1757799362453
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class ApiProviderNaming implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tslow: 'Native private fields are much slower and should only be used when needed. Ignore this warning if you know what you are doing, use compile-time private otherwise. See https://github.com/microsoft/vscode/issues/185991#issuecomment-1614468158 for details',\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\treturn {\n\t\t\t['PropertyDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t},\n\t\t\t['MethodDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "fa7e1ab681d5a0f2",
    "timestamp": 1757799367958
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class ApiProviderNaming implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tslow: 'Native private fields are much slower and should only be used when needed. Ignore this warning if you know what you are doing, use compile-time private otherwise. See https://github.com/microsoft/vscode/issues/185991#issuecomment-1614468158 for details',\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\treturn {\n\t\t\t['PropertyDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t},\n\t\t\t['MethodDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "fa7e1ab681d5a0f2",
    "timestamp": 1757800856382
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\n\nexport = new class ApiProviderNaming implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tslow: 'Native private fields are much slower and should only be used when needed. Ignore this warning if you know what you are doing, use compile-time private otherwise. See https://github.com/microsoft/vscode/issues/185991#issuecomment-1614468158 for details',\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\treturn {\n\t\t\t['PropertyDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t},\n\t\t\t['MethodDefinition PrivateIdentifier']: (node: any) => {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'slow'\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "fa7e1ab681d5a0f2",
    "timestamp": 1757799370652
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-native-private.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. [Empty line]\n8. Code execution: export = new class ApiProviderNaming imp...\n9. [Empty line]\n10. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n11. Code execution: messages: {\n12. Conditional logic\n13. Code execution: },\n14. Code execution: schema: false,\n15. Code execution: };\n16. [Empty line]\n17. Code execution: create(context: eslint.Rule.RuleContext)...\n18. [Empty line]\n19. Return statement\n20. Conditional logic\n21. Code execution: context.report({\n22. Code execution: node,\n23. Code execution: messageId: 'slow'\n24. Code execution: });\n25. Code execution: },\n26. Conditional logic\n27. Code execution: context.report({\n28. Code execution: node,\n29. Code execution: messageId: 'slow'\n30. Code execution: });\n31. Block delimiter\n32. Code execution: };\n33. Block delimiter\n34. Code execution: };\n35. Comment: /*------------------------------------------------...\n36. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n37. Comment: *  Licensed under the MIT License. See License.txt...\n38. Comment: *-------------------------------------------------...\n39. [Empty line]\n40. Import statement\n41. [Empty line]\n42. Code execution: export = new class ApiProviderNaming imp...\n43. [Empty line]\n44. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n45. Code execution: messages: {\n46. Conditional logic\n47. Code execution: },\n48. Code execution: schema: false,\n49. Code execution: };\n50. [Empty line]\n51. Code execution: create(context: eslint.Rule.RuleContext)...\n52. [Empty line]\n53. Return statement\n54. Conditional logic\n55. Code execution: context.report({\n56. Code execution: node,\n57. Code execution: messageId: 'slow'\n58. Code execution: });\n59. Code execution: },\n60. Conditional logic\n61. Code execution: context.report({\n62. Code execution: node,\n63. Code execution: messageId: 'slow'\n64. Code execution: });\n65. Block delimiter\n66. Code execution: };\n67. Block delimiter\n68. Code execution: };\n69. Comment: /*------------------------------------------------...\n70. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n71. Comment: *  Licensed under the MIT License. See License.txt...\n72. Comment: *-------------------------------------------------...\n73. [Empty line]\n74. Import statement\n75. [Empty line]\n76. Code execution: export = new class ApiProviderNaming imp...\n77. [Empty line]\n78. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n79. Code execution: messages: {\n80. Conditional logic\n81. Code execution: },\n82. Code execution: schema: false,\n83. Code execution: };\n84. [Empty line]\n85. Code execution: create(context: eslint.Rule.RuleContext)...\n86. [Empty line]\n87. Return statement\n88. Conditional logic\n89. Code execution: context.report({\n90. Code execution: node,\n91. Code execution: messageId: 'slow'\n92. Code execution: });\n93. Code execution: },\n94. Conditional logic\n95. Code execution: context.report({\n96. Code execution: node,\n97. Code execution: messageId: 'slow'\n98. Code execution: });\n99. Block delimiter\n100. Code execution: };\n101. Block delimiter\n102. Code execution: };\n103. Comment: /*------------------------------------------------...\n104. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n105. Comment: *  Licensed under the MIT License. See License.txt...\n106. Comment: *-------------------------------------------------...\n107. [Empty line]\n108. Import statement\n109. [Empty line]\n110. Code execution: export = new class ApiProviderNaming imp...\n111. [Empty line]\n112. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n113. Code execution: messages: {\n114. Conditional logic\n115. Code execution: },\n116. Code execution: schema: false,\n117. Code execution: };\n118. [Empty line]\n119. Code execution: create(context: eslint.Rule.RuleContext)...\n120. [Empty line]\n121. Return statement\n122. Conditional logic\n123. Code execution: context.report({\n124. Code execution: node,\n125. Code execution: messageId: 'slow'\n126. Code execution: });\n127. Code execution: },\n128. Conditional logic\n129. Code execution: context.report({\n130. Code execution: node,\n131. Code execution: messageId: 'slow'\n132. Code execution: });\n133. Block delimiter\n134. Code execution: };\n135. Block delimiter\n136. Code execution: };\n137. [Empty line]",
    "contentHash": "db5bdde2badbb6ca",
    "timestamp": 1757800801207
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts",
    "level": 5,
    "summary": "Abstraction level 5 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nexport = new class NoDangerousTypeAssertions implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\t// Disable in tests for now\n\t\tif (context.getFilename().includes('.test')) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\t// Disallow type assertions on object literals: <T>{ ... } or {} as T\n\t\t\t['TSTypeAssertion > ObjectExpression, TSAsExpression > ObjectExpression']: (node: any) => {\n\t\t\t\tconst objectNode = node as TSESTree.Node;\n\n\t\t\t\tconst parent = objectNode.parent as TSESTree.TSTypeAssertion | TSESTree.TSAsExpression;\n\t\t\t\tif (\n\t\t\t\t\t// Allow `as const` assertions\n\t\t\t\t\t(parent.typeAnnotation.type === 'TSTypeReference' && parent.typeAnnotation.typeName.type === 'Identifier' && parent.typeAnnotation.typeName.name === 'const')\n\n\t\t\t\t\t// For also now still allow `any` casts\n\t\t\t\t\t|| (parent.typeAnnotation.type === 'TSAnyKeyword')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Don't use type assertions for creating objects as this can hide type errors.`\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "c6f93c8f5a77cfbb",
    "timestamp": 1757799372654
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-dangerous-type-assertions.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nexport = new class NoDangerousTypeAssertions implements eslint.Rule.RuleModule {\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\t// Disable in tests for now\n\t\tif (context.getFilename().includes('.test')) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\t// Disallow type assertions on object literals: <T>{ ... } or {} as T\n\t\t\t['TSTypeAssertion > ObjectExpression, TSAsExpression > ObjectExpression']: (node: any) => {\n\t\t\t\tconst objectNode = node as TSESTree.Node;\n\n\t\t\t\tconst parent = objectNode.parent as TSESTree.TSTypeAssertion | TSESTree.TSAsExpression;\n\t\t\t\tif (\n\t\t\t\t\t// Allow `as const` assertions\n\t\t\t\t\t(parent.typeAnnotation.type === 'TSTypeReference' && parent.typeAnnotation.typeName.type === 'Identifier' && parent.typeAnnotation.typeName.name === 'const')\n\n\t\t\t\t\t// For also now still allow `any` casts\n\t\t\t\t\t|| (parent.typeAnnotation.type === 'TSAnyKeyword')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Don't use type assertions for creating objects as this can hide type errors.`\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n};\n",
    "contentHash": "c6f93c8f5a77cfbb",
    "timestamp": 1757799374519
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { dirname, relative } from 'path';\nimport minimatch from 'minimatch';\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'You are only allowed to define limited top level functions.'\n\t\t},\n\t\tschema: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tlet fileRelativePath = relative(dirname(__dirname), context.getFilename());\n\t\tif (!fileRelativePath.endsWith('/')) {\n\t\t\tfileRelativePath += '/';\n\t\t}\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tconst matchingKey = Object.keys(ruleArgs).find(key => fileRelativePath.startsWith(key) || minimatch(fileRelativePath, key));\n\t\tif (!matchingKey) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\tconst restrictedFunctions = ruleArgs[matchingKey];\n\n\t\treturn {\n\t\t\tFunctionDeclaration: (node: any) => {\n\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\tconst functionName = node.id.name;\n\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.id.name)) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tExportNamedDeclaration(node: any) {\n\t\t\t\tif (node.declaration && node.declaration.type === 'FunctionDeclaration') {\n\t\t\t\t\tconst functionName = node.declaration.id.name;\n\t\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.declaration.id.name)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "4f5269a32cc26202",
    "timestamp": 1757799547662
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { dirname, relative } from 'path';\nimport minimatch from 'minimatch';\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'You are only allowed to define limited top level functions.'\n\t\t},\n\t\tschema: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tlet fileRelativePath = relative(dirname(__dirname), context.getFilename());\n\t\tif (!fileRelativePath.endsWith('/')) {\n\t\t\tfileRelativePath += '/';\n\t\t}\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tconst matchingKey = Object.keys(ruleArgs).find(key => fileRelativePath.startsWith(key) || minimatch(fileRelativePath, key));\n\t\tif (!matchingKey) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\tconst restrictedFunctions = ruleArgs[matchingKey];\n\n\t\treturn {\n\t\t\tFunctionDeclaration: (node: any) => {\n\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\tconst functionName = node.id.name;\n\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.id.name)) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tExportNamedDeclaration(node: any) {\n\t\t\t\tif (node.declaration && node.declaration.type === 'FunctionDeclaration') {\n\t\t\t\t\tconst functionName = node.declaration.id.name;\n\t\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.declaration.id.name)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "4f5269a32cc26202",
    "timestamp": 1757799557084
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. Import statement\n8. Import statement\n9. [Empty line]\n10. Code execution: export = new class implements eslint.Rul...\n11. [Empty line]\n12. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n13. Code execution: messages: {\n14. Declaration/definition\n15. Code execution: },\n16. Code execution: schema: {\n17. Code execution: type: 'array',\n18. Code execution: items: {\n19. Code execution: type: 'object',\n20. Code execution: additionalProperties: {\n21. Code execution: type: 'array',\n22. Code execution: items: {\n23. Code execution: type: 'string'\n24. Block delimiter\n25. Block delimiter\n26. Block delimiter\n27. Block delimiter\n28. Code execution: };\n29. [Empty line]\n30. Code execution: create(context: eslint.Rule.RuleContext)...\n31. Declaration/definition\n32. Conditional logic\n33. Code execution: fileRelativePath += '/';\n34. Block delimiter\n35. Declaration/definition\n36. [Empty line]\n37. Declaration/definition\n38. Conditional logic\n39. Comment: // nothing\n40. Return statement\n41. Block delimiter\n42. [Empty line]\n43. Declaration/definition\n44. [Empty line]\n45. Return statement\n46. Code execution: FunctionDeclaration: (node: any) => {\n47. Declaration/definition\n48. Declaration/definition\n49. Conditional logic\n50. Code execution: context.report({\n51. Code execution: node,\n52. Declaration/definition\n53. Code execution: });\n54. Block delimiter\n55. Code execution: },\n56. Code execution: ExportNamedDeclaration(node: any) {\n57. Conditional logic\n58. Declaration/definition\n59. Declaration/definition\n60. Conditional logic\n61. Code execution: context.report({\n62. Code execution: node,\n63. Declaration/definition\n64. Code execution: });\n65. Block delimiter\n66. Block delimiter\n67. Block delimiter\n68. Code execution: };\n69. Block delimiter\n70. Code execution: };\n71. [Empty line]",
    "contentHash": "4f5269a32cc26202",
    "timestamp": 1757799558981
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-limited-top-functions.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { dirname, relative } from 'path';\nimport minimatch from 'minimatch';\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tlayerbreaker: 'You are only allowed to define limited top level functions.'\n\t\t},\n\t\tschema: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tlet fileRelativePath = relative(dirname(__dirname), context.getFilename());\n\t\tif (!fileRelativePath.endsWith('/')) {\n\t\t\tfileRelativePath += '/';\n\t\t}\n\t\tconst ruleArgs = <Record<string, string[]>>context.options[0];\n\n\t\tconst matchingKey = Object.keys(ruleArgs).find(key => fileRelativePath.startsWith(key) || minimatch(fileRelativePath, key));\n\t\tif (!matchingKey) {\n\t\t\t// nothing\n\t\t\treturn {};\n\t\t}\n\n\t\tconst restrictedFunctions = ruleArgs[matchingKey];\n\n\t\treturn {\n\t\t\tFunctionDeclaration: (node: any) => {\n\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\tconst functionName = node.id.name;\n\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.id.name)) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tExportNamedDeclaration(node: any) {\n\t\t\t\tif (node.declaration && node.declaration.type === 'FunctionDeclaration') {\n\t\t\t\t\tconst functionName = node.declaration.id.name;\n\t\t\t\t\tconst isTopLevel = node.parent.type === 'Program';\n\t\t\t\t\tif (isTopLevel && !restrictedFunctions.includes(node.declaration.id.name)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: `Top-level function '${functionName}' is restricted in this file. Allowed functions are: ${restrictedFunctions.join(', ')}.`\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "4f5269a32cc26202",
    "timestamp": 1757800091094
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-import-patterns.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-import-patterns.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\nimport * as path from 'path';\nimport minimatch from 'minimatch';\nimport { createImportRuleListener } from './utils';\n\nconst REPO_ROOT = path.normalize(path.join(__dirname, '../'));\n\ninterface ConditionalPattern {\n\twhen?: 'hasBrowser' | 'hasNode' | 'hasElectron' | 'test';\n\tpattern: string;\n}\n\ninterface RawImportPatternsConfig {\n\ttarget: string;\n\tlayer?: 'common' | 'worker' | 'browser' | 'electron-browser' | 'node' | 'electron-utility' | 'electron-main';\n\ttest?: boolean;\n\trestrictions: string | (string | ConditionalPattern)[];\n}\n\ninterface LayerAllowRule {\n\twhen: 'hasBrowser' | 'hasNode' | 'hasElectron' | 'test';\n\tallow: string[];\n}\n\ntype RawOption = RawImportPatternsConfig | LayerAllowRule;\n\nfunction isLayerAllowRule(option: RawOption): option is LayerAllowRule {\n\treturn !!((<LayerAllowRule>option).when && (<LayerAllowRule>option).allow);\n}\n\ninterface ImportPatternsConfig {\n\ttarget: string;\n\trestrictions: string[];\n}\n\nexport = new class implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tbadImport: 'Imports violates \\'{{restrictions}}\\' restrictions. See https://github.com/microsoft/vscode/wiki/Source-Code-Organization',\n\t\t\tbadFilename: 'Missing definition in `code-import-patterns` for this file. Define rules at https://github.com/microsoft/vscode/blob/main/eslint.config.js',\n\t\t\tbadAbsolute: 'Imports have to be relative to support ESM',\n\t\t\tbadExtension: 'Imports have to end with `.js` or `.css` to support ESM',\n\t\t},\n\t\tdocs: {\n\t\t\turl: 'https://github.com/microsoft/vscode/wiki/Source-Code-Organization'\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\t\tconst options = <RawOption[]>context.options;\n\t\tconst configs = this._processOptions(options);\n\t\tconst relativeFilename = getRelativeFilename(context);\n\n\t\tfor (const config of configs) {\n\t\t\tif (minimatch(relativeFilename, config.target)) {\n\t\t\t\treturn createImportRuleListener((node, value) => this._checkImport(context, config, node, value));\n\t\t\t}\n\t\t}\n\n\t\tcontext.report({\n\t\t\tloc: { line: 1, column: 0 },\n\t\t\tmessageId: 'badFilename'\n\t\t});\n\n\t\treturn {};\n\t}\n\n\tprivate _optionsCache = new WeakMap<RawOption[], ImportPatternsConfig[]>();\n\n\tprivate _processOptions(options: RawOption[]): ImportPatternsConfig[] {\n\t\tif (this._optionsCache.has(options)) {\n\t\t\treturn this._optionsCache.get(options)!;\n\t\t}\n\n\t\ttype Layer = 'common' | 'worker' | 'browser' | 'electron-browser' | 'node' | 'electron-utility' | 'electron-main';\n\n\t\tinterface ILayerRule {\n\t\t\tlayer: Layer;\n\t\t\tdeps: string;\n\t\t\tisBrowser?: boolean;\n\t\t\tisNode?: boolean;\n\t\t\tisElectron?: boolean;\n\t\t}\n\n\t\tfunction orSegment(variants: Layer[]): string {\n\t\t\treturn (variants.length === 1 ? variants[0] : `{${variants.join(',')}}`);\n\t\t}\n\n\t\tconst layerRules: ILayerRule[] = [\n\t\t\t{ layer: 'common', deps: orSegment(['common']) },\n\t\t\t{ layer: 'worker', deps: orSegment(['common', 'worker']) },\n\t\t\t{ layer: 'browser', deps: orSegment(['common', 'browser']), isBrowser: true },\n\t\t\t{ layer: 'electron-browser', deps: orSegment(['common', 'browser', 'electron-browser']), isBrowser: true },\n\t\t\t{ layer: 'node', deps: orSegment(['common', 'node']), isNode: true },\n\t\t\t{ layer: 'electron-utility', deps: orSegment(['common', 'node', 'electron-utility']), isNode: true, isElectron: true },\n\t\t\t{ layer: 'electron-main', deps: orSegment(['common', 'node', 'electron-utility', 'electron-main']), isNode: true, isElectron: true },\n\t\t];\n\n\t\tlet browserAllow: string[] = [];\n\t\tlet nodeAllow: string[] = [];\n\t\tlet electronAllow: string[] = [];\n\t\tlet testAllow: string[] = [];\n\t\tfor (const option of options) {\n\t\t\tif (isLayerAllowRule(option)) {\n\t\t\t\tif (option.when === 'hasBrowser') {\n\t\t\t\t\tbrowserAllow = option.allow.slice(0);\n\t\t\t\t} else if (option.when === 'hasNode') {\n\t\t\t\t\tnodeAllow = option.allow.slice(0);\n\t\t\t\t} else if (option.when === 'hasElectron') {\n\t\t\t\t\telectronAllow = option.allow.slice(0);\n\t\t\t\t} else if (option.when === 'test') {\n\t\t\t\t\ttestAllow = option.allow.slice(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction findLayer(layer: Layer): ILayerRule | null {\n\t\t\tfor (const layerRule of layerRules) {\n\t\t\t\tif (layerRule.layer === layer) {\n\t\t\t\t\treturn layerRule;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction generateConfig(layerRule: ILayerRule, target: string, rawRestrictions: (string | ConditionalPattern)[]): [ImportPatternsConfig, ImportPatternsConfig] {\n\t\t\tconst restrictions: string[] = [];\n\t\t\tconst testRestrictions: string[] = [...testAllow];\n\n\t\t\tif (layerRule.isBrowser) {\n\t\t\t\trestrictions.push(...browserAllow);\n\t\t\t}\n\n\t\t\tif (layerRule.isNode) {\n\t\t\t\trestrictions.push(...nodeAllow);\n\t\t\t}\n\n\t\t\tif (layerRule.isElectron) {\n\t\t\t\trestrictions.push(...electronAllow);\n\t\t\t}\n\n\t\t\tfor (const rawRestriction of rawRestrictions) {\n\t\t\t\tlet importPattern: string;\n\t\t\t\tlet when: 'hasBrowser' | 'hasNode' | 'hasElectron' | 'test' | undefined = undefined;\n\t\t\t\tif (typeof rawRestriction === 'string') {\n\t\t\t\t\timportPattern = rawRestriction;\n\t\t\t\t} else {\n\t\t\t\t\timportPattern = rawRestriction.pattern;\n\t\t\t\t\twhen = rawRestriction.when;\n\t\t\t\t}\n\t\t\t\tif (typeof when === 'undefined'\n\t\t\t\t\t|| (when === 'hasBrowser' && layerRule.isBrowser)\n\t\t\t\t\t|| (when === 'hasNode' && layerRule.isNode)\n\t\t\t\t\t|| (when === 'hasElectron' && layerRule.isElectron)\n\t\t\t\t) {\n\t\t\t\t\trestrictions.push(importPattern.replace(/\\/\\~$/, `/${layerRule.deps}/**`));\n\t\t\t\t\ttestRestrictions.push(importPattern.replace(/\\/\\~$/, `/test/${layerRule.deps}/**`));\n\t\t\t\t} else if (when === 'test') {\n\t\t\t\t\ttestRestrictions.push(importPattern.replace(/\\/\\~$/, `/${layerRule.deps}/**`));\n\t\t\t\t\ttestRestrictions.push(importPattern.replace(/\\/\\~$/, `/test/${layerRule.deps}/**`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttestRestrictions.push(...restrictions);\n\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttarget: target.replace(/\\/\\~$/, `/${layerRule.layer}/**`),\n\t\t\t\t\trestrictions: restrictions\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: target.replace(/\\/\\~$/, `/test/${layerRule.layer}/**`),\n\t\t\t\t\trestrictions: testRestrictions\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\n\t\tconst configs: ImportPatternsConfig[] = [];\n\t\tfor (const option of options) {\n\t\t\tif (isLayerAllowRule(option)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst target = option.target;\n\t\t\tconst targetIsVS = /^src\\/vs\\//.test(target);\n\t\t\tconst restrictions = (typeof option.restrictions === 'string' ? [option.restrictions] : option.restrictions).slice(0);\n\n\t\t\tif (targetIsVS) {\n\t\t\t\t// Always add \"vs/nls\" and \"vs/amdX\"\n\t\t\t\trestrictions.push('vs/nls.js');\n\t\t\t\trestrictions.push('vs/amdX.js'); // TODO@jrieken remove after ESM is real\n\t\t\t}\n\n\t\t\tif (targetIsVS && option.layer) {\n\t\t\t\t// single layer => simple substitution for /~\n\t\t\t\tconst layerRule = findLayer(option.layer);\n\t\t\t\tif (layerRule) {\n\t\t\t\t\tconst [config, testConfig] = generateConfig(layerRule, target, restrictions);\n\t\t\t\t\tif (option.test) {\n\t\t\t\t\t\tconfigs.push(testConfig);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconfigs.push(config);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (targetIsVS && /\\/\\~$/.test(target)) {\n\t\t\t\t// generate all layers\n\t\t\t\tfor (const layerRule of layerRules) {\n\t\t\t\t\tconst [config, testConfig] = generateConfig(layerRule, target, restrictions);\n\t\t\t\t\tconfigs.push(config);\n\t\t\t\t\tconfigs.push(testConfig);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconfigs.push({ target, restrictions: <string[]>restrictions.filter(r => typeof r === 'string') });\n\t\t\t}\n\t\t}\n\t\tthis._optionsCache.set(options, configs);\n\t\treturn configs;\n\t}\n\n\tprivate _checkImport(context: eslint.Rule.RuleContext, config: ImportPatternsConfig, node: TSESTree.Node, importPath: string) {\n\t\tconst targetIsVS = /^src\\/vs\\//.test(getRelativeFilename(context));\n\t\tif (targetIsVS) {\n\n\t\t\t// ESM: check for import ending with \".js\" or \".css\"\n\t\t\tif (importPath[0] === '.' && !importPath.endsWith('.js') && !importPath.endsWith('.css')) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tloc: node.loc,\n\t\t\t\t\tmessageId: 'badExtension',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// check for import being relative\n\t\t\tif (importPath.startsWith('vs/')) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tloc: node.loc,\n\t\t\t\t\tmessageId: 'badAbsolute',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// resolve relative paths\n\t\tif (importPath[0] === '.') {\n\t\t\tconst relativeFilename = getRelativeFilename(context);\n\t\t\timportPath = path.posix.join(path.posix.dirname(relativeFilename), importPath);\n\t\t\tif (/^src\\/vs\\//.test(importPath)) {\n\t\t\t\t// resolve using base url\n\t\t\t\timportPath = importPath.substring('src/'.length);\n\t\t\t}\n\t\t}\n\n\t\tconst restrictions = config.restrictions;\n\n\t\tlet matched = false;\n\t\tfor (const pattern of restrictions) {\n\t\t\tif (minimatch(importPath, pattern)) {\n\t\t\t\tmatched = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!matched) {\n\t\t\t// None of the restrictions matched\n\t\t\tcontext.report({\n\t\t\t\tloc: node.loc,\n\t\t\t\tmessageId: 'badImport',\n\t\t\t\tdata: {\n\t\t\t\t\trestrictions: restrictions.join(' or ')\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n};\n\n/**\n * Returns the filename relative to the project root and using `/` as separators\n */\nfunction getRelativeFilename(context: eslint.Rule.RuleContext): string {\n\tconst filename = path.normalize(context.getFilename());\n\treturn filename.substring(REPO_ROOT.length).replace(/\\\\/g, '/');\n}\n",
    "contentHash": "68435013ac8a62c5",
    "timestamp": 1757800091831
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-test-only.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-no-test-only.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. [Empty line]\n8. Code execution: export = new class NoTestOnly implements...\n9. [Empty line]\n10. Code execution: create(context: eslint.Rule.RuleContext)...\n11. Return statement\n12. Code execution: ['MemberExpression[object.name=/^(test|s...\n13. Return statement\n14. Code execution: node,\n15. Code execution: message: 'only is a dev-time tool and CA...\n16. Code execution: });\n17. Block delimiter\n18. Code execution: };\n19. Block delimiter\n20. Code execution: };\n21. [Empty line]",
    "contentHash": "35efc4ef2e6324d8",
    "timestamp": 1757800114264
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-string-type-literals.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-string-type-literals.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. Import statement\n8. [Empty line]\n9. Code execution: export = new class ApiTypeDiscrimination...\n10. [Empty line]\n11. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n12. Code execution: docs: { url: 'https://github.com/microso...\n13. Code execution: messages: {\n14. Code execution: noTypeDiscrimination: 'Do not use type d...\n15. Code execution: },\n16. Code execution: schema: false,\n17. Code execution: };\n18. [Empty line]\n19. Code execution: create(context: eslint.Rule.RuleContext)...\n20. Return statement\n21. Code execution: ['TSPropertySignature[optional=false] TS...\n22. Declaration/definition\n23. [Empty line]\n24. Conditional logic\n25. [Empty line]\n26. Code execution: context.report({\n27. Code execution: node: node,\n28. Code execution: messageId: 'noTypeDiscrimination'\n29. Code execution: });\n30. Block delimiter\n31. Block delimiter\n32. Code execution: };\n33. Block delimiter\n34. Code execution: };\n35. [Empty line]",
    "contentHash": "02e43dda48b84645",
    "timestamp": 1757800115136
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. Import statement\n8. [Empty line]\n9. Code execution: export = new class ApiVsCodeInComments i...\n10. [Empty line]\n11. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n12. Code execution: messages: {\n13. Code execution: comment: `Don't use the term 'vs code' i...\n14. Code execution: },\n15. Code execution: schema: false,\n16. Code execution: };\n17. [Empty line]\n18. Code execution: create(context: eslint.Rule.RuleContext)...\n19. [Empty line]\n20. Declaration/definition\n21. [Empty line]\n22. Return statement\n23. Code execution: ['Program']: (_node: any) => {\n24. [Empty line]\n25. Declaration/definition\n26. Conditional logic\n27. Code execution: continue;\n28. Block delimiter\n29. Conditional logic\n30. Code execution: continue;\n31. Block delimiter\n32. [Empty line]\n33. Declaration/definition\n34. Declaration/definition\n35. Declaration/definition\n36. Loop structure\n37. Comment: // Allow using 'VS Code' in quotes\n38. Conditional logic\n39. Code execution: continue;\n40. Block delimiter\n41. [Empty line]\n42. Comment: // Types for eslint seem incorrect\n43. Declaration/definition\n44. Declaration/definition\n45. Code execution: context.report({\n46. Code execution: messageId: 'comment',\n47. Code execution: loc: { start, end }\n48. Code execution: });\n49. Block delimiter\n50. Block delimiter\n51. Block delimiter\n52. Code execution: };\n53. Block delimiter\n54. Code execution: };\n55. Comment: /*------------------------------------------------...\n56. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n57. Comment: *  Licensed under the MIT License. See License.txt...\n58. Comment: *-------------------------------------------------...\n59. [Empty line]\n60. Import statement\n61. Import statement\n62. [Empty line]\n63. Code execution: export = new class ApiVsCodeInComments i...\n64. [Empty line]\n65. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n66. Code execution: messages: {\n67. Code execution: comment: `Don't use the term 'vs code' i...\n68. Code execution: },\n69. Code execution: schema: false,\n70. Code execution: };\n71. [Empty line]\n72. Code execution: create(context: eslint.Rule.RuleContext)...\n73. [Empty line]\n74. Declaration/definition\n75. [Empty line]\n76. Return statement\n77. Code execution: ['Program']: (_node: any) => {\n78. [Empty line]\n79. Declaration/definition\n80. Conditional logic\n81. Code execution: continue;\n82. Block delimiter\n83. Conditional logic\n84. Code execution: continue;\n85. Block delimiter\n86. [Empty line]\n87. Declaration/definition\n88. Declaration/definition\n89. Declaration/definition\n90. Loop structure\n91. Comment: // Allow using 'VS Code' in quotes\n92. Conditional logic\n93. Code execution: continue;\n94. Block delimiter\n95. [Empty line]\n96. Comment: // Types for eslint seem incorrect\n97. Declaration/definition\n98. Declaration/definition\n99. Code execution: context.report({\n100. Code execution: messageId: 'comment',\n101. Code execution: loc: { start, end }\n102. Code execution: });\n103. Block delimiter\n104. Block delimiter\n105. Block delimiter\n106. Code execution: };\n107. Block delimiter\n108. Code execution: };\n109. Comment: /*------------------------------------------------...\n110. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n111. Comment: *  Licensed under the MIT License. See License.txt...\n112. Comment: *-------------------------------------------------...\n113. [Empty line]\n114. Import statement\n115. Import statement\n116. [Empty line]\n117. Code execution: export = new class ApiVsCodeInComments i...\n118. [Empty line]\n119. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n120. Code execution: messages: {\n121. Code execution: comment: `Don't use the term 'vs code' i...\n122. Code execution: },\n123. Code execution: schema: false,\n124. Code execution: };\n125. [Empty line]\n126. Code execution: create(context: eslint.Rule.RuleContext)...\n127. [Empty line]\n128. Declaration/definition\n129. [Empty line]\n130. Return statement\n131. Code execution: ['Program']: (_node: any) => {\n132. [Empty line]\n133. Declaration/definition\n134. Conditional logic\n135. Code execution: continue;\n136. Block delimiter\n137. Conditional logic\n138. Code execution: continue;\n139. Block delimiter\n140. [Empty line]\n141. Declaration/definition\n142. Declaration/definition\n143. Declaration/definition\n144. Loop structure\n145. Comment: // Allow using 'VS Code' in quotes\n146. Conditional logic\n147. Code execution: continue;\n148. Block delimiter\n149. [Empty line]\n150. Comment: // Types for eslint seem incorrect\n151. Declaration/definition\n152. Declaration/definition\n153. Code execution: context.report({\n154. Code execution: messageId: 'comment',\n155. Code execution: loc: { start, end }\n156. Code execution: });\n157. Block delimiter\n158. Block delimiter\n159. Block delimiter\n160. Code execution: };\n161. Block delimiter\n162. Code execution: };\n163. Comment: /*------------------------------------------------...\n164. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n165. Comment: *  Licensed under the MIT License. See License.txt...\n166. Comment: *-------------------------------------------------...\n167. [Empty line]\n168. Import statement\n169. Import statement\n170. [Empty line]\n171. Code execution: export = new class ApiVsCodeInComments i...\n172. [Empty line]\n173. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n174. Code execution: messages: {\n175. Code execution: comment: `Don't use the term 'vs code' i...\n176. Code execution: },\n177. Code execution: schema: false,\n178. Code execution: };\n179. [Empty line]\n180. Code execution: create(context: eslint.Rule.RuleContext)...\n181. [Empty line]\n182. Declaration/definition\n183. [Empty line]\n184. Return statement\n185. Code execution: ['Program']: (_node: any) => {\n186. [Empty line]\n187. Declaration/definition\n188. Conditional logic\n189. Code execution: continue;\n190. Block delimiter\n191. Conditional logic\n192. Code execution: continue;\n193. Block delimiter\n194. [Empty line]\n195. Declaration/definition\n196. Declaration/definition\n197. Declaration/definition\n198. Loop structure\n199. Comment: // Allow using 'VS Code' in quotes\n200. Conditional logic\n201. Code execution: continue;\n202. Block delimiter\n203. [Empty line]\n204. Comment: // Types for eslint seem incorrect\n205. Declaration/definition\n206. Declaration/definition\n207. Code execution: context.report({\n208. Code execution: messageId: 'comment',\n209. Code execution: loc: { start, end }\n210. Code execution: });\n211. Block delimiter\n212. Block delimiter\n213. Block delimiter\n214. Code execution: };\n215. Block delimiter\n216. Code execution: };\n217. Comment: /*------------------------------------------------...\n218. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n219. Comment: *  Licensed under the MIT License. See License.txt...\n220. Comment: *-------------------------------------------------...\n221. [Empty line]\n222. Import statement\n223. Import statement\n224. [Empty line]\n225. Code execution: export = new class ApiVsCodeInComments i...\n226. [Empty line]\n227. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n228. Code execution: messages: {\n229. Code execution: comment: `Don't use the term 'vs code' i...\n230. Code execution: },\n231. Code execution: schema: false,\n232. Code execution: };\n233. [Empty line]\n234. Code execution: create(context: eslint.Rule.RuleContext)...\n235. [Empty line]\n236. Declaration/definition\n237. [Empty line]\n238. Return statement\n239. Code execution: ['Program']: (_node: any) => {\n240. [Empty line]\n241. Declaration/definition\n242. Conditional logic\n243. Code execution: continue;\n244. Block delimiter\n245. Conditional logic\n246. Code execution: continue;\n247. Block delimiter\n248. [Empty line]\n249. Declaration/definition\n250. Declaration/definition\n251. Declaration/definition\n252. Loop structure\n253. Comment: // Allow using 'VS Code' in quotes\n254. Conditional logic\n255. Code execution: continue;\n256. Block delimiter\n257. [Empty line]\n258. Comment: // Types for eslint seem incorrect\n259. Declaration/definition\n260. Declaration/definition\n261. Code execution: context.report({\n262. Code execution: messageId: 'comment',\n263. Code execution: loc: { start, end }\n264. Code execution: });\n265. Block delimiter\n266. Block delimiter\n267. Block delimiter\n268. Code execution: };\n269. Block delimiter\n270. Code execution: };\n271. [Empty line]",
    "contentHash": "92ed9b6846a7c32b",
    "timestamp": 1757800119961
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts:level4": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts",
    "level": 4,
    "summary": "Abstraction level 4 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "92ed9b6846a7c32b",
    "timestamp": 1757800126394
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts:level2": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts",
    "level": 2,
    "summary": "Abstraction level 2 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "92ed9b6846a7c32b",
    "timestamp": 1757800128273
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts:level1": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts",
    "level": 1,
    "summary": "Abstraction level 1 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "92ed9b6846a7c32b",
    "timestamp": 1757800130619
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/vscode-dts-vscode-in-comments.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport type * as estree from 'estree';\n\nexport = new class ApiVsCodeInComments implements eslint.Rule.RuleModule {\n\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tmessages: {\n\t\t\tcomment: `Don't use the term 'vs code' in comments`\n\t\t},\n\t\tschema: false,\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst sourceCode = context.getSourceCode();\n\n\t\treturn {\n\t\t\t['Program']: (_node: any) => {\n\n\t\t\t\tfor (const comment of sourceCode.getAllComments()) {\n\t\t\t\t\tif (comment.type !== 'Block') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!comment.range) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startIndex = comment.range[0] + '/*'.length;\n\t\t\t\t\tconst re = /vs code/ig;\n\t\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\t\twhile ((match = re.exec(comment.value))) {\n\t\t\t\t\t\t// Allow using 'VS Code' in quotes\n\t\t\t\t\t\tif (comment.value[match.index - 1] === `'` && comment.value[match.index + match[0].length] === `'`) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Types for eslint seem incorrect\n\t\t\t\t\t\tconst start = sourceCode.getLocFromIndex(startIndex + match.index) as any as estree.Position;\n\t\t\t\t\t\tconst end = sourceCode.getLocFromIndex(startIndex + match.index + match[0].length) as any as estree.Position;\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tmessageId: 'comment',\n\t\t\t\t\t\t\tloc: { start, end }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
    "contentHash": "fe54de981c84db91",
    "timestamp": 1757800244515
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-result.ts:level3": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-result.ts",
    "level": 3,
    "summary": "Abstraction level 3 + /*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as eslint from 'eslint';\nimport { TSESTree } from '@typescript-eslint/utils';\n\nconst VALID_USES = new Set<TSESTree.AST_NODE_TYPES | undefined>([\n\tTSESTree.AST_NODE_TYPES.AwaitExpression,\n\tTSESTree.AST_NODE_TYPES.VariableDeclarator,\n]);\n\nexport = new class MustUseResults implements eslint.Rule.RuleModule {\n\treadonly meta: eslint.Rule.RuleMetaData = {\n\t\tschema: false\n\t};\n\n\tcreate(context: eslint.Rule.RuleContext): eslint.Rule.RuleListener {\n\n\t\tconst config = <{ message: string; functions: string[] }[]>context.options[0];\n\t\tconst listener: eslint.Rule.RuleListener = {};\n\n\t\tfor (const { message, functions } of config) {\n\t\t\tfor (const fn of functions) {\n\t\t\t\tconst query = `CallExpression[callee.property.name='${fn}'], CallExpression[callee.name='${fn}']`;\n\t\t\t\tlistener[query] = (node: any) => {\n\t\t\t\t\tconst cast: TSESTree.CallExpression = node;\n\t\t\t\t\tif (!VALID_USES.has(cast.parent?.type)) {\n\t\t\t\t\t\tcontext.report({ node, message });\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn listener;\n\t}\n};\n",
    "contentHash": "9796f96926136e42",
    "timestamp": 1757800247309
  },
  "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-result.ts:level5": {
    "filePath": "/Users/simonvutov/Documents/vscode/.eslint-plugin-local/code-must-use-result.ts",
    "level": 5,
    "summary": "1. Comment: /*------------------------------------------------...\n2. Comment: *  Copyright (c) Microsoft Corporation. All rights...\n3. Comment: *  Licensed under the MIT License. See License.txt...\n4. Comment: *-------------------------------------------------...\n5. [Empty line]\n6. Import statement\n7. Import statement\n8. [Empty line]\n9. Declaration/definition\n10. Code execution: TSESTree.AST_NODE_TYPES.AwaitExpression,\n11. Code execution: TSESTree.AST_NODE_TYPES.VariableDeclarat...\n12. Code execution: ]);\n13. [Empty line]\n14. Code execution: export = new class MustUseResults implem...\n15. Code execution: readonly meta: eslint.Rule.RuleMetaData ...\n16. Code execution: schema: false\n17. Code execution: };\n18. [Empty line]\n19. Code execution: create(context: eslint.Rule.RuleContext)...\n20. [Empty line]\n21. Declaration/definition\n22. Declaration/definition\n23. [Empty line]\n24. Declaration/definition\n25. Declaration/definition\n26. Declaration/definition\n27. Code execution: listener[query] = (node: any) => {\n28. Declaration/definition\n29. Conditional logic\n30. Code execution: context.report({ node, message });\n31. Block delimiter\n32. Code execution: };\n33. Block delimiter\n34. Block delimiter\n35. [Empty line]\n36. Return statement\n37. Block delimiter\n38. Code execution: };\n39. [Empty line]",
    "contentHash": "9796f96926136e42",
    "timestamp": 1757800289424
  }
}